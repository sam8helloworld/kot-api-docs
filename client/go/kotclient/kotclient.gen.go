// Package kotclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package kotclient

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for GetCompanySettingsDecimalTreatType.
const (
	Round     GetCompanySettingsDecimalTreatType = "round"
	RoundDown GetCompanySettingsDecimalTreatType = "roundDown"
	RoundUp   GetCompanySettingsDecimalTreatType = "roundUp"
)

// Defines values for GetCompanySettingsTimeDisplayFormat.
const (
	Decimal     GetCompanySettingsTimeDisplayFormat = "decimal"
	Sexagesimal GetCompanySettingsTimeDisplayFormat = "sexagesimal"
)

// Defines values for GetEmployeeGender.
const (
	GetEmployeeGenderFemale GetEmployeeGender = "female"
	GetEmployeeGenderMale   GetEmployeeGender = "male"
)

// Defines values for GetEmployeesItemGender.
const (
	GetEmployeesItemGenderFemale GetEmployeesItemGender = "female"
	GetEmployeesItemGenderMale   GetEmployeesItemGender = "male"
)

// Defines values for GetSchedulesScheduleRequestsApplicantType.
const (
	GetSchedulesScheduleRequestsApplicantTypeAdministrator GetSchedulesScheduleRequestsApplicantType = "administrator"
	GetSchedulesScheduleRequestsApplicantTypeEmployee      GetSchedulesScheduleRequestsApplicantType = "employee"
)

// Defines values for GetSchedulesScheduleRequestsCurrentFlow.
const (
	GetSchedulesScheduleRequestsCurrentFlowN1 GetSchedulesScheduleRequestsCurrentFlow = 1
	GetSchedulesScheduleRequestsCurrentFlowN2 GetSchedulesScheduleRequestsCurrentFlow = 2
	GetSchedulesScheduleRequestsCurrentFlowN3 GetSchedulesScheduleRequestsCurrentFlow = 3
	GetSchedulesScheduleRequestsCurrentFlowN4 GetSchedulesScheduleRequestsCurrentFlow = 4
	GetSchedulesScheduleRequestsCurrentFlowN5 GetSchedulesScheduleRequestsCurrentFlow = 5
)

// Defines values for GetSchedulesScheduleRequestsFlowLevel.
const (
	GetSchedulesScheduleRequestsFlowLevelN1 GetSchedulesScheduleRequestsFlowLevel = 1
	GetSchedulesScheduleRequestsFlowLevelN2 GetSchedulesScheduleRequestsFlowLevel = 2
	GetSchedulesScheduleRequestsFlowLevelN3 GetSchedulesScheduleRequestsFlowLevel = 3
	GetSchedulesScheduleRequestsFlowLevelN4 GetSchedulesScheduleRequestsFlowLevel = 4
	GetSchedulesScheduleRequestsFlowLevelN5 GetSchedulesScheduleRequestsFlowLevel = 5
)

// Defines values for GetSchedulesScheduleRequestsStatus.
const (
	GetSchedulesScheduleRequestsStatusApplying GetSchedulesScheduleRequestsStatus = "applying"
	GetSchedulesScheduleRequestsStatusApproved GetSchedulesScheduleRequestsStatus = "approved"
	GetSchedulesScheduleRequestsStatusRejected GetSchedulesScheduleRequestsStatus = "rejected"
)

// Defines values for RegisterEmployeeGender.
const (
	RegisterEmployeeGenderFemale RegisterEmployeeGender = "female"
	RegisterEmployeeGenderMale   RegisterEmployeeGender = "male"
)

// Defines values for UpdateEmployeeGender.
const (
	UpdateEmployeeGenderFemale UpdateEmployeeGender = "female"
	UpdateEmployeeGenderMale   UpdateEmployeeGender = "male"
)

// Defines values for DailyWorkingCurrentDateEmployeeGender.
const (
	DailyWorkingCurrentDateEmployeeGenderFemale     DailyWorkingCurrentDateEmployeeGender = "female"
	DailyWorkingCurrentDateEmployeeGenderMale       DailyWorkingCurrentDateEmployeeGender = "male"
	DailyWorkingCurrentDateEmployeeGenderNoSelected DailyWorkingCurrentDateEmployeeGender = "no_selected"
)

// Defines values for DailyWorkingCustomDailyWorkingCalculationUnitCode.
const (
	DailyWorkingCustomDailyWorkingCalculationUnitCodeN1 DailyWorkingCustomDailyWorkingCalculationUnitCode = 1
	DailyWorkingCustomDailyWorkingCalculationUnitCodeN2 DailyWorkingCustomDailyWorkingCalculationUnitCode = 2
	DailyWorkingCustomDailyWorkingCalculationUnitCodeN4 DailyWorkingCustomDailyWorkingCalculationUnitCode = 4
)

// Defines values for DailyWorkingResponseAutoBreakOff.
const (
	DailyWorkingResponseAutoBreakOffN1 DailyWorkingResponseAutoBreakOff = 1
	DailyWorkingResponseAutoBreakOffN2 DailyWorkingResponseAutoBreakOff = 2
	DailyWorkingResponseAutoBreakOffN3 DailyWorkingResponseAutoBreakOff = 3
)

// Defines values for DailyWorkingTimerecordCode.
const (
	DailyWorkingTimerecordCodeN1 DailyWorkingTimerecordCode = "1"
	DailyWorkingTimerecordCodeN2 DailyWorkingTimerecordCode = "2"
	DailyWorkingTimerecordCodeN3 DailyWorkingTimerecordCode = "3"
	DailyWorkingTimerecordCodeN4 DailyWorkingTimerecordCode = "4"
	DailyWorkingTimerecordCodeN7 DailyWorkingTimerecordCode = "7"
	DailyWorkingTimerecordCodeN8 DailyWorkingTimerecordCode = "8"
)

// Defines values for DailyWorkingTimerecordRequestCode.
const (
	DailyWorkingTimerecordRequestCodeN1 DailyWorkingTimerecordRequestCode = "1"
	DailyWorkingTimerecordRequestCodeN2 DailyWorkingTimerecordRequestCode = "2"
	DailyWorkingTimerecordRequestCodeN3 DailyWorkingTimerecordRequestCode = "3"
	DailyWorkingTimerecordRequestCodeN4 DailyWorkingTimerecordRequestCode = "4"
	DailyWorkingTimerecordRequestCodeN7 DailyWorkingTimerecordRequestCode = "7"
	DailyWorkingTimerecordRequestCodeN8 DailyWorkingTimerecordRequestCode = "8"
)

// Defines values for EmployeeRequestGender.
const (
	EmployeeRequestGenderFemale EmployeeRequestGender = "female"
	EmployeeRequestGenderMale   EmployeeRequestGender = "male"
)

// Defines values for MonthlyWorkingCurrentDateEmployeeGender.
const (
	Female     MonthlyWorkingCurrentDateEmployeeGender = "female"
	Male       MonthlyWorkingCurrentDateEmployeeGender = "male"
	NoSelected MonthlyWorkingCurrentDateEmployeeGender = "no_selected"
)

// Defines values for MonthlyWorkingHolidayObtainedCode.
const (
	MonthlyWorkingHolidayObtainedCodeN1 MonthlyWorkingHolidayObtainedCode = "1"
	MonthlyWorkingHolidayObtainedCodeN2 MonthlyWorkingHolidayObtainedCode = "2"
)

// Defines values for RequestFlowLevel.
const (
	RequestFlowLevelN1 RequestFlowLevel = 1
	RequestFlowLevelN2 RequestFlowLevel = 2
	RequestFlowLevelN3 RequestFlowLevel = 3
	RequestFlowLevelN4 RequestFlowLevel = 4
	RequestFlowLevelN5 RequestFlowLevel = 5
)

// Defines values for RequestOvertimeApplicantType.
const (
	RequestOvertimeApplicantTypeAdministrator RequestOvertimeApplicantType = "administrator"
	RequestOvertimeApplicantTypeEmployee      RequestOvertimeApplicantType = "employee"
)

// Defines values for RequestOvertimeResponseCurrentFlow.
const (
	N1 RequestOvertimeResponseCurrentFlow = 1
	N2 RequestOvertimeResponseCurrentFlow = 2
	N3 RequestOvertimeResponseCurrentFlow = 3
	N4 RequestOvertimeResponseCurrentFlow = 4
	N5 RequestOvertimeResponseCurrentFlow = 5
)

// Defines values for RequestOvertimeResponseStatus.
const (
	RequestOvertimeResponseStatusApplying RequestOvertimeResponseStatus = "applying"
	RequestOvertimeResponseStatusApproved RequestOvertimeResponseStatus = "approved"
	RequestOvertimeResponseStatusRejected RequestOvertimeResponseStatus = "rejected"
)

// Defines values for GetAdministratorsParamsAdditionalFields.
const (
	GetAdministratorsParamsAdditionalFieldsAssociatedEmployees GetAdministratorsParamsAdditionalFields = "associatedEmployees"
	GetAdministratorsParamsAdditionalFieldsEmailAddresses      GetAdministratorsParamsAdditionalFields = "emailAddresses"
)

// Defines values for GetDailyWorkingsParamsAdditionalFields.
const (
	GetDailyWorkingsParamsAdditionalFieldsCurrentDateEmployee GetDailyWorkingsParamsAdditionalFields = "currentDateEmployee"
)

// Defines values for GetDailyWorkingCostsParamsAdditionalFields.
const (
	GetDailyWorkingCostsParamsAdditionalFieldsCurrentDateEmployee GetDailyWorkingCostsParamsAdditionalFields = "currentDateEmployee"
)

// Defines values for GetDailyWorkingCostParamsAdditionalFields.
const (
	GetDailyWorkingCostParamsAdditionalFieldsCurrentDateEmployee GetDailyWorkingCostParamsAdditionalFields = "currentDateEmployee"
)

// Defines values for GetDailyWorkingTimerecordsParamsAdditionalFields.
const (
	GetDailyWorkingTimerecordsParamsAdditionalFieldsCurrentDateEmployee GetDailyWorkingTimerecordsParamsAdditionalFields = "currentDateEmployee"
)

// Defines values for GetDailyWorkingTimerecordParamsAdditionalFields.
const (
	GetDailyWorkingTimerecordParamsAdditionalFieldsCurrentDateEmployee GetDailyWorkingTimerecordParamsAdditionalFields = "currentDateEmployee"
)

// Defines values for GetDailyWorkingParamsAdditionalFields.
const (
	GetDailyWorkingParamsAdditionalFieldsCurrentDateEmployee GetDailyWorkingParamsAdditionalFields = "currentDateEmployee"
)

// Defines values for GetEmployeeGroupsParamsAdditionalFields.
const (
	Category GetEmployeeGroupsParamsAdditionalFields = "category"
)

// Defines values for GetEmployeesParamsAdditionalFields.
const (
	GetEmployeesParamsAdditionalFieldsAllDayRegardingWorkInMinute GetEmployeesParamsAdditionalFields = "allDayRegardingWorkInMinute"
	GetEmployeesParamsAdditionalFieldsBirthDate                   GetEmployeesParamsAdditionalFields = "birthDate"
	GetEmployeesParamsAdditionalFieldsEmailAddresses              GetEmployeesParamsAdditionalFields = "emailAddresses"
	GetEmployeesParamsAdditionalFieldsFirstNamePhonetics          GetEmployeesParamsAdditionalFields = "firstNamePhonetics"
	GetEmployeesParamsAdditionalFieldsHiredDate                   GetEmployeesParamsAdditionalFields = "hiredDate"
	GetEmployeesParamsAdditionalFieldsLastNamePhonetics           GetEmployeesParamsAdditionalFields = "lastNamePhonetics"
	GetEmployeesParamsAdditionalFieldsResignationDate             GetEmployeesParamsAdditionalFields = "resignationDate"
)

// Defines values for GetEmployeeParamsAdditionalFields.
const (
	AllDayRegardingWorkInMinute GetEmployeeParamsAdditionalFields = "allDayRegardingWorkInMinute"
	BirthDate                   GetEmployeeParamsAdditionalFields = "birthDate"
	EmailAddresses              GetEmployeeParamsAdditionalFields = "emailAddresses"
	FirstNamePhonetics          GetEmployeeParamsAdditionalFields = "firstNamePhonetics"
	HiredDate                   GetEmployeeParamsAdditionalFields = "hiredDate"
	LastNamePhonetics           GetEmployeeParamsAdditionalFields = "lastNamePhonetics"
	ResignationDate             GetEmployeeParamsAdditionalFields = "resignationDate"
)

// Defines values for GetMonthlyWorkingParamsAdditionalFields.
const (
	CurrentDateEmployee GetMonthlyWorkingParamsAdditionalFields = "currentDateEmployee"
	IsConfirmation      GetMonthlyWorkingParamsAdditionalFields = "isConfirmation"
	VariationalWork     GetMonthlyWorkingParamsAdditionalFields = "variationalWork"
	WeeklyWork          GetMonthlyWorkingParamsAdditionalFields = "weeklyWork"
)

// Defines values for GetOvertimeParamsAdditionalFields.
const (
	GetOvertimeParamsAdditionalFieldsFlow                GetOvertimeParamsAdditionalFields = "flow"
	GetOvertimeParamsAdditionalFieldsNote                GetOvertimeParamsAdditionalFields = "note"
	GetOvertimeParamsAdditionalFieldsSchedulePatternCode GetOvertimeParamsAdditionalFields = "schedulePatternCode"
	GetOvertimeParamsAdditionalFieldsSchedulePatternName GetOvertimeParamsAdditionalFields = "schedulePatternName"
	GetOvertimeParamsAdditionalFieldsWorkFixedEnd        GetOvertimeParamsAdditionalFields = "workFixedEnd"
	GetOvertimeParamsAdditionalFieldsWorkFixedStart      GetOvertimeParamsAdditionalFields = "workFixedStart"
)

// Defines values for GetSchedulesParamsAdditionalFields.
const (
	GetSchedulesParamsAdditionalFieldsFlow                GetSchedulesParamsAdditionalFields = "flow"
	GetSchedulesParamsAdditionalFieldsNote                GetSchedulesParamsAdditionalFields = "note"
	GetSchedulesParamsAdditionalFieldsSchedulePatternCode GetSchedulesParamsAdditionalFields = "schedulePatternCode"
	GetSchedulesParamsAdditionalFieldsSchedulePatternName GetSchedulesParamsAdditionalFields = "schedulePatternName"
	GetSchedulesParamsAdditionalFieldsWorkFixedEnd        GetSchedulesParamsAdditionalFields = "workFixedEnd"
	GetSchedulesParamsAdditionalFieldsWorkFixedStart      GetSchedulesParamsAdditionalFields = "workFixedStart"
)

// GetAccessTokenAvailability defines model for GetAccessTokenAvailability.
type GetAccessTokenAvailability struct {
	Available bool `json:"available"`
}

// GetAdministrators defines model for GetAdministrators.
type GetAdministrators = []GetAdministratorsItem

// GetAdministratorsAssociatedEmployee 割当従業員
type GetAdministratorsAssociatedEmployee struct {
	// Code 従業員コード
	Code string `json:"code"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// Key 従業員識別キー（従業員コードが変更されても不変）
	Key string `json:"key"`

	// LastName 姓
	LastName string `json:"lastName"`
}

// GetAdministratorsItem defines model for GetAdministrators_item.
type GetAdministratorsItem struct {
	AssociatedEmployees *[]GetAdministratorsAssociatedEmployee `json:"associatedEmployees,omitempty"`

	// Code 管理者コード
	Code string `json:"code"`

	// EmailAddresses メールアドレス
	EmailAddresses *openapi_types.Email `json:"emailAddresses,omitempty"`

	// Key 管理者識別キー（管理者コードが変更されても不変）
	Key string `json:"key"`

	// Name 管理者名
	Name string `json:"name"`
}

// GetCompany defines model for GetCompany.
type GetCompany struct {
	// BusinessYearStartDate 事業年度開始日
	BusinessYearStartDate string `json:"businessYearStartDate"`

	// Code 企業コード
	Code string `json:"code"`

	// Host ホスト名
	Host string `json:"host"`

	// Key 企業識別キー
	Key string `json:"key"`

	// Name 企業名
	Name string `json:"name"`

	// Settings 企業設定情報
	Settings GetCompanySettings `json:"settings"`
}

// GetCompanySettings 企業設定情報
type GetCompanySettings struct {
	// DecimalTreatType 10進表示の小数第3位の扱い（roundDown： 切下げ　roundUp： 切上げ　round： 四捨五入）
	DecimalTreatType GetCompanySettingsDecimalTreatType `json:"decimalTreatType"`

	// TimeDisplayFormat 表示形式（decimal： 10進法　sexagesimal： 60進法）
	TimeDisplayFormat GetCompanySettingsTimeDisplayFormat `json:"timeDisplayFormat"`
}

// GetCompanySettingsDecimalTreatType 10進表示の小数第3位の扱い（roundDown： 切下げ　roundUp： 切上げ　round： 四捨五入）
type GetCompanySettingsDecimalTreatType string

// GetCompanySettingsTimeDisplayFormat 表示形式（decimal： 10進法　sexagesimal： 60進法）
type GetCompanySettingsTimeDisplayFormat string

// GetDailyWorking defines model for GetDailyWorking.
type GetDailyWorking struct {
	DailyWorkings []DailyWorkingResponse `json:"dailyWorkings"`
	Date          openapi_types.Date     `json:"date"`
}

// GetDailyWorkingCost defines model for GetDailyWorkingCost.
type GetDailyWorkingCost struct {
	DailyWorkings []DailyWorkingCostResponse `json:"dailyWorkings"`
	Date          openapi_types.Date         `json:"date"`
}

// GetDailyWorkingCosts defines model for GetDailyWorkingCosts.
type GetDailyWorkingCosts = []struct {
	DailyWorkings []DailyWorkingCostResponse `json:"dailyWorkings"`
	Date          openapi_types.Date         `json:"date"`
}

// GetDailyWorkingTimerecords defines model for GetDailyWorkingTimerecords.
type GetDailyWorkingTimerecords = []struct {
	DailyWorkings []DailyWorkingTimerecordResponse `json:"dailyWorkings"`
	Date          openapi_types.Date               `json:"date"`
}

// GetDailyWorkings defines model for GetDailyWorkings.
type GetDailyWorkings = []struct {
	DailyWorkings []DailyWorkingResponse `json:"dailyWorkings"`
	Date          openapi_types.Date     `json:"date"`
}

// GetDivisions defines model for GetDivisions.
type GetDivisions = []DivisionResponse

// GetEmployee defines model for GetEmployee.
type GetEmployee struct {
	// AllDayRegardingWorkInMinute 日の契約労働時間
	AllDayRegardingWorkInMinute *int `json:"allDayRegardingWorkInMinute,omitempty"`

	// BirthDate 生年月日
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmailAddresses メールアドレス
	EmailAddresses *[]openapi_types.Email `json:"emailAddresses,omitempty"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []EmployeeGroup `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics *string `json:"firstNamePhonetics,omitempty"`

	// Gender 性別（male： 男性　female： 女性）
	Gender GetEmployeeGender `json:"gender"`

	// HiredDate 入社年月日
	HiredDate *openapi_types.Date `json:"hiredDate,omitempty"`

	// Key 従業員識別キー（従業員コードが変更されても不変）
	Key string `json:"key"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics *string `json:"lastNamePhonetics,omitempty"`

	// ResignationDate 退職年月日
	ResignationDate *openapi_types.Date `json:"resignationDate,omitempty"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// GetEmployeeGender 性別（male： 男性　female： 女性）
type GetEmployeeGender string

// GetEmployeeGroups defines model for GetEmployeeGroups.
type GetEmployeeGroups = []GetEmployeeGroupsItem

// GetEmployeeGroupsItem defines model for GetEmployeeGroups_item.
type GetEmployeeGroupsItem struct {
	// Category 従業員グループカテゴリ
	Category *GetEmployeeGroupsItemCategory `json:"category,omitempty"`

	// Code 従業員グループコード
	Code string `json:"code"`

	// Name 従業員グループ名
	Name string `json:"name"`
}

// GetEmployeeGroupsItemCategory 従業員グループカテゴリ
type GetEmployeeGroupsItemCategory struct {
	// Code 従業員グループカテゴリコード
	Code string `json:"code"`

	// Name 従業員グループカテゴリ名
	Name string `json:"name"`
}

// GetEmployees defines model for GetEmployees.
type GetEmployees = []GetEmployeesItem

// GetEmployeesItem defines model for GetEmployees_item.
type GetEmployeesItem struct {
	// AllDayRegardingWorkInMinute 日の契約労働時間
	AllDayRegardingWorkInMinute *int `json:"allDayRegardingWorkInMinute,omitempty"`

	// BirthDate 生年月日
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmailAddresses メールアドレス
	EmailAddresses *[]openapi_types.Email `json:"emailAddresses,omitempty"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []EmployeeGroup `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics *string `json:"firstNamePhonetics,omitempty"`

	// Gender 性別（male： 男性　female： 女性）
	Gender GetEmployeesItemGender `json:"gender"`

	// HiredDate 入社年月日
	HiredDate *openapi_types.Date `json:"hiredDate,omitempty"`

	// Key 従業員識別キー（従業員コードが変更されても不変）
	Key string `json:"key"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics *string `json:"lastNamePhonetics,omitempty"`

	// ResignationDate 退職年月日
	ResignationDate *openapi_types.Date `json:"resignationDate,omitempty"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// GetEmployeesItemGender 性別（male： 男性　female： 女性）
type GetEmployeesItemGender string

// GetMonthlyWorking defines model for GetMonthlyWorking.
type GetMonthlyWorking = []struct {
	// AbsentdayCount 欠勤日数
	AbsentdayCount int `json:"absentdayCount"`

	// Assigned 所定時間（分）
	Assigned int `json:"assigned"`

	// Bind 拘束時間（分）
	Bind int `json:"bind"`

	// BreakSum 休憩時間（分）
	BreakSum int `json:"breakSum"`

	// CurrentDateEmployee 今日時点の従業員データ
	CurrentDateEmployee *MonthlyWorkingCurrentDateEmployee `json:"currentDateEmployee,omitempty"`

	// CustomMonthlyWorkings 月別カスタム勤怠項目
	CustomMonthlyWorkings []MonthlyWorkingCustomMonthlyWorking `json:"customMonthlyWorkings"`

	// EarlyLeave 早退時間（分）
	EarlyLeave int `json:"earlyLeave"`

	// EarlyLeaveCount 早退回数
	EarlyLeaveCount int `json:"earlyLeaveCount"`

	// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
	EmployeeKey string `json:"employeeKey"`

	// EndDate 集計終了日
	EndDate openapi_types.Date `json:"endDate"`

	// GeneralHolidayWork 法定外休日労働
	GeneralHolidayWork MonthlyWorkingGeneralHolidayWork `json:"generalHolidayWork"`

	// HolidayWork 休日労働
	HolidayWork MonthlyWorkingHolidayWork `json:"holidayWork"`

	// HolidaysObtained 休暇取得
	HolidaysObtained []MonthlyWorkingHolidayObtained `json:"holidaysObtained"`

	// IntervalShortageCount インターバル不足回数
	IntervalShortageCount int `json:"intervalShortageCount"`

	// IsClosing 締め状況
	IsClosing bool `json:"isClosing"`

	// IsConfirmation 確認状況
	IsConfirmation *bool `json:"isConfirmation,omitempty"`

	// Late 遅刻時間（分）
	Late int `json:"late"`

	// LateCount 遅刻回数
	LateCount int `json:"lateCount"`

	// LegalHolidayWork 法定休日労働
	LegalHolidayWork MonthlyWorkingLegalHolidayWork `json:"legalHolidayWork"`

	// Month 月
	Month int `json:"month"`

	// Night 深夜労働時間（分）
	Night int `json:"night"`

	// NightOvertime 深夜残業時間（分）
	NightOvertime int `json:"nightOvertime"`

	// NightUnassigned 深夜所定外時間（分）
	NightUnassigned int `json:"nightUnassigned"`

	// Overtime 残業時間（分）
	Overtime int `json:"overtime"`

	// PremiumWork 割増労働
	PremiumWork MonthlyWorkingPremiumWork `json:"premiumWork"`

	// Regarding 休暇みなし時間（分）
	Regarding int `json:"regarding"`

	// StartDate 集計開始日
	StartDate openapi_types.Date `json:"startDate"`

	// Unassigned 所定外時間（分）
	Unassigned int `json:"unassigned"`

	// VariationalWork 変形労働
	VariationalWork *MonthlyWorkingVariationalWork `json:"variationalWork,omitempty"`

	// WeekdayWorkingCount 平日勤務回数
	WeekdayWorkingCount int `json:"weekdayWorkingCount"`

	// WeekdayWorkingdayCount 平日勤務日数
	WeekdayWorkingdayCount int `json:"weekdayWorkingdayCount"`

	// WeeklyWork 週の残業時間
	WeeklyWork *MonthlyWorkingWeeklyWork `json:"weeklyWork,omitempty"`

	// WorkingCount 総勤務回数
	WorkingCount int `json:"workingCount"`

	// WorkingdayCount 総勤務日数
	WorkingdayCount int `json:"workingdayCount"`

	// Year 年
	Year int `json:"year"`
}

// GetOvertime defines model for GetOvertime.
type GetOvertime struct {
	Month            int                       `json:"month"`
	OvertimeRequests []RequestOvertimeResponse `json:"overtimeRequests"`
	Year             int                       `json:"year"`
}

// GetSchedules defines model for GetSchedules.
type GetSchedules struct {
	Month            int32 `json:"month"`
	ScheduleRequests []struct {
		// AdminComment 管理者コメント
		AdminComment string `json:"adminComment"`
		Applicant    struct {
			// Key 識別キー（従業員 または 管理者）
			Key string `json:"key"`

			// Type 種別（employee： 従業員　administrator： 管理者)
			Type GetSchedulesScheduleRequestsApplicantType `json:"type"`
		} `json:"applicant"`
		Current struct {
			// BreakSchedule 休憩予定時間（分）
			BreakSchedule int32 `json:"breakSchedule"`

			// ClockInSchedule 出勤予定時間
			ClockInSchedule KotDate `json:"clockInSchedule"`

			// ClockOutSchedule 退勤予定時間
			ClockOutSchedule KotDate `json:"clockOutSchedule"`

			// HolidaysObtained 休暇取得
			HolidaysObtained struct {
				FulltimeHoliday struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// Name 休暇区分名
					Name string `json:"name"`
				} `json:"fulltimeHoliday"`
				HalfdayHolidays []struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// Name 休暇区分名
					Name string `json:"name"`

					// TypeName 半休種別名
					TypeName string `json:"typeName"`
				} `json:"halfdayHolidays"`
				HourHolidays []struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// End 休暇終了予定
					End KotDate `json:"end"`

					// Minutes 休暇取得時間
					Minutes int32 `json:"minutes"`

					// Name 休暇区分名
					Name string `json:"name"`

					// Start 休暇開始予定
					Start KotDate `json:"start"`
				} `json:"hourHolidays"`
			} `json:"holidaysObtained"`

			// OvertimeUpperLimit 残業上限時間（分）
			OvertimeUpperLimit *int32 `json:"overtimeUpperLimit,omitempty"`

			// ScheduleTypeName スケジュール種別
			ScheduleTypeName string `json:"scheduleTypeName"`

			// StartEndBreakSchedule 休憩開始終了予定
			StartEndBreakSchedule []struct {
				// End 休憩終了予定
				End KotDate `json:"end"`

				// Start 休憩開始予定
				Start KotDate `json:"start"`
			} `json:"startEndBreakSchedule"`

			// SubstitutionClockInName 振替出勤
			SubstitutionClockInName string `json:"substitutionClockInName"`

			// WorkDayTypeName 勤務日種別名
			WorkDayTypeName string `json:"workDayTypeName"`

			// WorkPlaceDivisionCode 出勤先所属コード
			WorkPlaceDivisionCode string `json:"workPlaceDivisionCode"`

			// WorkPlaceDivisionName 出勤先所属名
			WorkPlaceDivisionName string `json:"workPlaceDivisionName"`
		} `json:"current"`

		// CurrentFlow 現在の承認フローレベル（１～５）
		CurrentFlow GetSchedulesScheduleRequestsCurrentFlow `json:"currentFlow"`

		// Date 対象日
		Date openapi_types.Date `json:"date"`

		// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
		EmployeeKey string `json:"employeeKey"`

		// Flow 承認フロー
		Flow *[]struct {
			// AdministratorKeys 管理者識別キー（管理者コードが変更されても不変）
			AdministratorKeys []string `json:"administratorKeys"`

			// Level 承認フローレベル（１～５）
			Level GetSchedulesScheduleRequestsFlowLevel `json:"level"`
		} `json:"flow,omitempty"`

		// LastModifiedAdministratorKey 最終更新管理者識別キー
		LastModifiedAdministratorKey string `json:"lastModifiedAdministratorKey"`

		// Message 申請メッセージ
		Message string `json:"message"`

		// Note 備考
		Note *string `json:"note,omitempty"`

		// RequestKey 申請識別キー
		RequestKey string `json:"requestKey"`
		Requested  struct {
			// BreakSchedule 休憩予定時間（分）
			BreakSchedule int32 `json:"breakSchedule"`

			// ClockInSchedule 出勤予定時間
			ClockInSchedule KotDate `json:"clockInSchedule"`

			// ClockOutSchedule 退勤予定時間
			ClockOutSchedule KotDate `json:"clockOutSchedule"`

			// HolidaysObtained 休暇取得
			HolidaysObtained struct {
				FulltimeHoliday struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// Name 休暇区分名
					Name string `json:"name"`
				} `json:"fulltimeHoliday"`
				HalfdayHolidays []struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// Name 休暇区分名
					Name string `json:"name"`

					// TypeName 半休種別名
					TypeName string `json:"typeName"`
				} `json:"halfdayHolidays"`
				HourHolidays []struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// End 休暇終了予定
					End KotDate `json:"end"`

					// Minutes 休暇取得時間
					Minutes int32 `json:"minutes"`

					// Name 休暇区分名
					Name string `json:"name"`

					// Start 休暇開始予定
					Start KotDate `json:"start"`
				} `json:"hourHolidays"`
			} `json:"holidaysObtained"`

			// OvertimeUpperLimit 残業上限時間（分）
			OvertimeUpperLimit *int32 `json:"overtimeUpperLimit,omitempty"`

			// ScheduleTypeName スケジュール種別
			ScheduleTypeName string `json:"scheduleTypeName"`

			// StartEndBreakSchedule 休憩開始終了予定
			StartEndBreakSchedule []struct {
				// End 休憩終了予定
				End KotDate `json:"end"`

				// Start 休憩開始予定
				Start KotDate `json:"start"`
			} `json:"startEndBreakSchedule"`

			// SubstitutionClockInName 振替出勤
			SubstitutionClockInName string `json:"substitutionClockInName"`

			// WorkDayTypeName 勤務日種別名
			WorkDayTypeName string `json:"workDayTypeName"`

			// WorkPlaceDivisionCode 出勤先所属コード
			WorkPlaceDivisionCode string `json:"workPlaceDivisionCode"`

			// WorkPlaceDivisionName 出勤先所属名
			WorkPlaceDivisionName string `json:"workPlaceDivisionName"`
		} `json:"requested"`

		// RequestedDate 申請日
		RequestedDate openapi_types.Date `json:"requestedDate"`

		// SchedulePatternCode スケジュールパターンコード
		SchedulePatternCode *string `json:"schedulePatternCode,omitempty"`

		// SchedulePatternName スケジュールパターン名
		SchedulePatternName *string `json:"schedulePatternName,omitempty"`

		// Status 申請ステータス（applying 申請中　rejected： 棄却　approved： 承認）
		Status GetSchedulesScheduleRequestsStatus `json:"status"`

		// WorkFixedEnd 勤務終了刻限
		WorkFixedEnd *KotDate `json:"workFixedEnd,omitempty"`

		// WorkFixedStart 勤務開始刻限
		WorkFixedStart *KotDate `json:"workFixedStart,omitempty"`
	} `json:"scheduleRequests"`
	Year int32 `json:"year"`
}

// GetSchedulesScheduleRequestsApplicantType 種別（employee： 従業員　administrator： 管理者)
type GetSchedulesScheduleRequestsApplicantType string

// GetSchedulesScheduleRequestsCurrentFlow 現在の承認フローレベル（１～５）
type GetSchedulesScheduleRequestsCurrentFlow int32

// GetSchedulesScheduleRequestsFlowLevel 承認フローレベル（１～５）
type GetSchedulesScheduleRequestsFlowLevel int

// GetSchedulesScheduleRequestsStatus 申請ステータス（applying 申請中　rejected： 棄却　approved： 承認）
type GetSchedulesScheduleRequestsStatus string

// RefreshAccessToken defines model for RefreshAccessToken.
type RefreshAccessToken struct {
	// Token refreshed access token
	Token string `json:"token"`
}

// RegisterDailyWorkingTimerecord defines model for RegisterDailyWorkingTimerecord.
type RegisterDailyWorkingTimerecord struct {
	// Date 日時
	Date openapi_types.Date `json:"date"`

	// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
	EmployeeKey string `json:"employeeKey"`

	// TimeRecord 打刻
	TimeRecord DailyWorkingTimerecord `json:"timeRecord"`
}

// RegisterEmployee defines model for RegisterEmployee.
type RegisterEmployee struct {
	// AllDayRegardingWorkInMinute 日の契約労働時間
	AllDayRegardingWorkInMinute *int `json:"allDayRegardingWorkInMinute,omitempty"`

	// BirthDate 生年月日
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmailAddresses メールアドレス
	EmailAddresses *[]openapi_types.Email `json:"emailAddresses,omitempty"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []EmployeeGroup `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics *string `json:"firstNamePhonetics,omitempty"`

	// Gender 性別（male： 男性　female： 女性）
	Gender RegisterEmployeeGender `json:"gender"`

	// HiredDate 入社年月日
	HiredDate *openapi_types.Date `json:"hiredDate,omitempty"`

	// Key 従業員識別キー（従業員コードが変更されても不変）
	Key string `json:"key"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics *string `json:"lastNamePhonetics,omitempty"`

	// ResignationDate 退職年月日
	ResignationDate *openapi_types.Date `json:"resignationDate,omitempty"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// RegisterEmployeeGender 性別（male： 男性　female： 女性）
type RegisterEmployeeGender string

// UpdateEmployee defines model for UpdateEmployee.
type UpdateEmployee struct {
	// AllDayRegardingWorkInMinute 日の契約労働時間
	AllDayRegardingWorkInMinute *int `json:"allDayRegardingWorkInMinute,omitempty"`

	// BirthDate 生年月日
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmailAddresses メールアドレス
	EmailAddresses *[]openapi_types.Email `json:"emailAddresses,omitempty"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []struct {
		// Code 従業員グループコード
		Code string `json:"code"`

		// Name 従業員グループ名
		Name string `json:"name"`
	} `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics *string `json:"firstNamePhonetics,omitempty"`

	// Gender 性別（male： 男性　female： 女性）
	Gender UpdateEmployeeGender `json:"gender"`

	// HiredDate 入社年月日
	HiredDate *openapi_types.Date `json:"hiredDate,omitempty"`

	// Key 従業員識別キー（従業員コードが変更されても不変）
	Key string `json:"key"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics *string `json:"lastNamePhonetics,omitempty"`

	// ResignationDate 退職年月日
	ResignationDate *openapi_types.Date `json:"resignationDate,omitempty"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// UpdateEmployeeGender 性別（male： 男性　female： 女性）
type UpdateEmployeeGender string

// DailyWorkingCostResponse defines model for daily_working_cost_response.
type DailyWorkingCostResponse struct {
	// CurrentDateEmployee 今日時点の従業員データ
	CurrentDateEmployee *DailyWorkingCurrentDateEmployee `json:"currentDateEmployee,omitempty"`

	// Date 日時
	Date openapi_types.Date `json:"date"`

	// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
	EmployeeKey string `json:"employeeKey"`

	// LaborCostEstimate 人件費概算
	LaborCostEstimate int `json:"laborCostEstimate"`

	// TransportationExpense 交通費
	TransportationExpense int `json:"transportationExpense"`
}

// DailyWorkingCurrentDateEmployee 今日時点の従業員データ
type DailyWorkingCurrentDateEmployee struct {
	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []EmployeeGroup `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics string `json:"firstNamePhonetics"`

	// Gender 性別（no_selected： 選択しない　male： 男性　female： 女性）
	Gender DailyWorkingCurrentDateEmployeeGender `json:"gender"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics string `json:"lastNamePhonetics"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// DailyWorkingCurrentDateEmployeeGender 性別（no_selected： 選択しない　male： 男性　female： 女性）
type DailyWorkingCurrentDateEmployeeGender string

// DailyWorkingCustomDailyWorking defines model for daily_working_custom_daily_working.
type DailyWorkingCustomDailyWorking struct {
	// CalculationResult 計算結果
	CalculationResult int `json:"calculationResult"`

	// CalculationUnitCode 計算単位コード（1： 日数　2： 時間　4： 数値）
	CalculationUnitCode DailyWorkingCustomDailyWorkingCalculationUnitCode `json:"calculationUnitCode"`

	// Code 日別カスタム表示コード
	Code string `json:"code"`

	// Name 日別カスタム表示名
	Name string `json:"name"`
}

// DailyWorkingCustomDailyWorkingCalculationUnitCode 計算単位コード（1： 日数　2： 時間　4： 数値）
type DailyWorkingCustomDailyWorkingCalculationUnitCode int

// DailyWorkingFulltimeHoliday defines model for daily_working_fulltime_holiday.
type DailyWorkingFulltimeHoliday struct {
	// Code 休暇区分コード
	Code int `json:"code"`

	// Name 休暇区分名
	Name string `json:"name"`
}

// DailyWorkingHalfdayHoliday defines model for daily_working_halfday_holiday.
type DailyWorkingHalfdayHoliday struct {
	// Code 休暇区分コード
	Code int `json:"code"`

	// Name 休暇区分名
	Name string `json:"name"`

	// TypeName 半休種別名
	TypeName string `json:"typeName"`
}

// DailyWorkingHolidaysObtained 休暇取得
type DailyWorkingHolidaysObtained struct {
	FulltimeHoliday DailyWorkingFulltimeHoliday  `json:"fulltimeHoliday"`
	HalfdayHolidays []DailyWorkingHalfdayHoliday `json:"halfdayHolidays"`
	HourHolidays    []DailyWorkingHourHoliday    `json:"hourHolidays"`
}

// DailyWorkingHourHoliday defines model for daily_working_hour_holiday.
type DailyWorkingHourHoliday struct {
	// Code 休暇区分コード
	Code int `json:"code"`

	// End 休暇終了時間
	End time.Time `json:"end"`

	// Minutes 休暇取得時間
	Minutes int `json:"minutes"`

	// Name 休暇区分名
	Name string `json:"name"`

	// Start 休暇開始時間
	Start time.Time `json:"start"`
}

// DailyWorkingResponse defines model for daily_working_response.
type DailyWorkingResponse struct {
	// Assigned 所定時間（分）
	Assigned int `json:"assigned"`

	// AutoBreakOff 自動休憩無効（null： 休憩を無効化しない 1：　雇用区分休憩無効　2： スケジュール休憩無効　3： 全ての自動休憩無効）
	AutoBreakOff DailyWorkingResponseAutoBreakOff `json:"autoBreakOff"`

	// BreakTime 休憩時間（分）
	BreakTime int `json:"breakTime"`

	// CurrentDateEmployee 今日時点の従業員データ
	CurrentDateEmployee *DailyWorkingCurrentDateEmployee `json:"currentDateEmployee,omitempty"`
	CustomDailyWorkings []DailyWorkingCustomDailyWorking `json:"customDailyWorkings"`

	// Date 日時
	Date openapi_types.Date `json:"date"`

	// DiscretionaryVacation 休暇みなし時間（分）
	DiscretionaryVacation int `json:"discretionaryVacation"`

	// EarlyLeave 早退時間（分）
	EarlyLeave int `json:"earlyLeave"`

	// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
	EmployeeKey string `json:"employeeKey"`

	// HolidaysObtained 休暇取得
	HolidaysObtained DailyWorkingHolidaysObtained `json:"holidaysObtained"`

	// IsClosing 締め状況
	IsClosing bool `json:"isClosing"`

	// IsError エラー勤務状況
	IsError bool `json:"isError"`

	// IsHelp ヘルプ勤務状況
	IsHelp bool `json:"isHelp"`

	// Late 遅刻時間（分）
	Late int `json:"late"`

	// LateNight 深夜時間（分）
	LateNight int `json:"lateNight"`

	// LateNightOvertime 深夜残業時間（分）
	LateNightOvertime int `json:"lateNightOvertime"`

	// LateNightUnassigned 深夜所定外時間（分）
	LateNightUnassigned int `json:"lateNightUnassigned"`

	// Overtime 残業時間（分）
	Overtime int `json:"overtime"`

	// TotalWork 労働合計時間（分）
	TotalWork int `json:"totalWork"`

	// Unassigned 所定外時間（分）
	Unassigned int `json:"unassigned"`

	// WorkPlaceDivisionCode 出勤先所属コード
	WorkPlaceDivisionCode string `json:"workPlaceDivisionCode"`

	// WorkPlaceDivisionName 出勤先所属名
	WorkPlaceDivisionName *string `json:"workPlaceDivisionName,omitempty"`

	// WorkdayTypeName 勤務日種別名
	WorkdayTypeName string `json:"workdayTypeName"`
}

// DailyWorkingResponseAutoBreakOff 自動休憩無効（null： 休憩を無効化しない 1：　雇用区分休憩無効　2： スケジュール休憩無効　3： 全ての自動休憩無効）
type DailyWorkingResponseAutoBreakOff int

// DailyWorkingTimerecord 打刻
type DailyWorkingTimerecord struct {
	// Code 打刻種別コード
	Code DailyWorkingTimerecordCode `json:"code"`

	// CredentialCode (注)レスポンス定義にはこのキーは存在しないが、例にはある
	CredentialCode *int `json:"credentialCode,omitempty"`

	// CredentialName (注)レスポンス定義にはこのキーは存在しないが、例にはある
	CredentialName *string `json:"credentialName,omitempty"`

	// DivisionCode 打刻所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 打刻所属名
	DivisionName string `json:"divisionName"`

	// Latitude 緯度
	Latitude float64 `json:"latitude"`

	// Longitude 経度
	Longitude float64 `json:"longitude"`

	// Name 打刻種別名
	Name string `json:"name"`

	// Time 打刻時間
	Time time.Time `json:"time"`
}

// DailyWorkingTimerecordCode 打刻種別コード
type DailyWorkingTimerecordCode string

// DailyWorkingTimerecordRequest defines model for daily_working_timerecord_request.
type DailyWorkingTimerecordRequest struct {
	// Code 打刻種別コード（1： 出勤　2： 退勤　3： 休憩開始　4： 休憩終了　7： 外出入　8： 外出戻）
	// 省略時は、KING OF TIMEの処理に従って打刻種別を決定します。
	Code *DailyWorkingTimerecordRequestCode `json:"code,omitempty"`

	// Date 勤務日
	// 指定された勤務日に打刻データが紐づきます。
	Date openapi_types.Date `json:"date"`

	// DivisionCode 打刻先所属コード
	// 省略時は、該当従業員が所属している所属を打刻先所属として扱います。
	DivisionCode *string `json:"divisionCode,omitempty"`

	// Latitude 緯度
	Latitude *float64 `json:"latitude,omitempty"`

	// Longitude 経度
	Longitude *float64 `json:"longitude,omitempty"`

	// Time 打刻時間
	Time time.Time `json:"time"`
}

// DailyWorkingTimerecordRequestCode 打刻種別コード（1： 出勤　2： 退勤　3： 休憩開始　4： 休憩終了　7： 外出入　8： 外出戻）
// 省略時は、KING OF TIMEの処理に従って打刻種別を決定します。
type DailyWorkingTimerecordRequestCode string

// DailyWorkingTimerecordResponse defines model for daily_working_timerecord_response.
type DailyWorkingTimerecordResponse struct {
	// CurrentDateEmployee 今日時点の従業員データ
	CurrentDateEmployee *DailyWorkingCurrentDateEmployee `json:"currentDateEmployee,omitempty"`

	// Date 日時
	Date openapi_types.Date `json:"date"`

	// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
	EmployeeKey string `json:"employeeKey"`

	// TimeRecord 打刻
	TimeRecord []DailyWorkingTimerecord `json:"timeRecord"`
}

// DivisionResponse defines model for division_response.
type DivisionResponse struct {
	// Code 所属コード
	Code string `json:"code"`

	// DayBorderTime 所属名
	DayBorderTime string `json:"dayBorderTime"`

	// Name 所属名
	Name string `json:"name"`
}

// EmployeeGroup defines model for employee_group.
type EmployeeGroup struct {
	// Code 従業員グループコード
	Code string `json:"code"`

	// Name 従業員グループ名
	Name string `json:"name"`
}

// EmployeeRequest defines model for employee_request.
type EmployeeRequest struct {
	// AllDayRegardingWorkInMinute 日の契約労働時間
	AllDayRegardingWorkInMinute *int `json:"allDayRegardingWorkInMinute,omitempty"`

	// BirthDate 生年月日
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// EmailAddresses メールアドレス
	EmailAddresses *[]openapi_types.Email `json:"emailAddresses,omitempty"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics *string `json:"firstNamePhonetics,omitempty"`

	// Gender 性別（male： 男性　female： 女性）
	Gender EmployeeRequestGender `json:"gender"`

	// HiredDate 入社年月日
	HiredDate *openapi_types.Date `json:"hiredDate,omitempty"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics *string `json:"lastNamePhonetics,omitempty"`

	// ResignationDate 退職年月日
	ResignationDate *openapi_types.Date `json:"resignationDate,omitempty"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`
}

// EmployeeRequestGender 性別（male： 男性　female： 女性）
type EmployeeRequestGender string

// MonthlyWorkingCurrentDateEmployee 今日時点の従業員データ
type MonthlyWorkingCurrentDateEmployee struct {
	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []EmployeeGroup `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics string `json:"firstNamePhonetics"`

	// Gender 性別（no_selected： 選択しない　male： 男性　female： 女性）
	Gender MonthlyWorkingCurrentDateEmployeeGender `json:"gender"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics string `json:"lastNamePhonetics"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// MonthlyWorkingCurrentDateEmployeeGender 性別（no_selected： 選択しない　male： 男性　female： 女性）
type MonthlyWorkingCurrentDateEmployeeGender string

// MonthlyWorkingCustomMonthlyWorking defines model for monthly_working_custom_monthly_working.
type MonthlyWorkingCustomMonthlyWorking struct {
	// CalculationResult 計算結果
	CalculationResult int `json:"calculationResult"`

	// CalculationUnitCode 計算単位コード
	CalculationUnitCode int `json:"calculationUnitCode"`

	// CalculationUnitName 計算単位名
	CalculationUnitName string `json:"calculationUnitName"`

	// Code 月別カスタム表示コード
	Code string `json:"code"`

	// Name 月別カスタム表示名
	Name string `json:"name"`
}

// MonthlyWorkingGeneralHolidayWork 法定外休日労働
type MonthlyWorkingGeneralHolidayWork struct {
	// Count 勤務回数
	Count int `json:"count"`

	// DayCount 勤務日数
	DayCount int `json:"dayCount"`

	// Extra 所定外時間（分）
	Extra int `json:"extra"`

	// Night 深夜労働時間（分）
	Night int `json:"night"`

	// NightExtra 深夜所定外時間（分）
	NightExtra int `json:"nightExtra"`

	// NightOvertime 深夜残業時間（分）
	NightOvertime int `json:"nightOvertime"`

	// Normal 所定労働時間（分）
	Normal int `json:"normal"`

	// Overtime 残業時間（分）
	Overtime int `json:"overtime"`
}

// MonthlyWorkingHolidayObtained defines model for monthly_working_holiday_obtained.
type MonthlyWorkingHolidayObtained struct {
	// Code 休暇区分コード（1 または 2 の休暇はデフォルトで設定されている休暇）
	Code MonthlyWorkingHolidayObtainedCode `json:"code"`

	// DayCount 休暇取得日数
	DayCount int `json:"dayCount"`

	// Minutes 時間休暇取得時間（分）
	Minutes int `json:"minutes"`

	// Name 休暇区分名
	Name string `json:"name"`
}

// MonthlyWorkingHolidayObtainedCode 休暇区分コード（1 または 2 の休暇はデフォルトで設定されている休暇）
type MonthlyWorkingHolidayObtainedCode string

// MonthlyWorkingHolidayWork 休日労働
type MonthlyWorkingHolidayWork struct {
	// Extra 所定外時間（分）
	Extra int `json:"extra"`

	// Night 深夜労働時間（分）
	Night int `json:"night"`

	// NightExtra 深夜所定外時間（分）
	NightExtra int `json:"nightExtra"`

	// NightOvertime 深夜残業時間（分）
	NightOvertime int `json:"nightOvertime"`

	// Normal 所定労働時間（分）
	Normal int `json:"normal"`

	// Overtime 残業時間（分）
	Overtime int `json:"overtime"`
}

// MonthlyWorkingLegalHolidayWork 法定休日労働
type MonthlyWorkingLegalHolidayWork struct {
	// Count 勤務回数
	Count int `json:"count"`

	// DayCount 勤務日数
	DayCount int `json:"dayCount"`

	// Extra 所定外時間（分）
	Extra int `json:"extra"`

	// Night 深夜労働時間（分）
	Night int `json:"night"`

	// NightExtra 深夜所定外時間（分）
	NightExtra int `json:"nightExtra"`

	// NightOvertime 深夜残業時間（分）
	NightOvertime int `json:"nightOvertime"`

	// Normal 所定労働時間（分）
	Normal int `json:"normal"`

	// Overtime 残業時間（分）
	Overtime int `json:"overtime"`
}

// MonthlyWorkingPremiumWork 割増労働
type MonthlyWorkingPremiumWork struct {
	// NightOvertime1 深夜残業時間１（分）
	NightOvertime1 int `json:"nightOvertime1"`

	// NightOvertime2 深夜残業時間２（分）
	NightOvertime2 int `json:"nightOvertime2"`

	// Overtime1 残業時間１（分）
	Overtime1 int `json:"overtime1"`

	// Overtime2 残業時間２（分）
	Overtime2 int `json:"overtime2"`
}

// MonthlyWorkingVariationalWork 変形労働
type MonthlyWorkingVariationalWork struct {
	// MonthlyGeneralHolidayNightOvertime 月の法定外休日深夜残業時間（分）
	MonthlyGeneralHolidayNightOvertime int `json:"monthlyGeneralHolidayNightOvertime"`

	// MonthlyGeneralHolidayOvertime 月の法定外休日残業時間（分）
	MonthlyGeneralHolidayOvertime int `json:"monthlyGeneralHolidayOvertime"`

	// MonthlyLegalHolidayNightOvertime 月の法定休日深夜残業時間（分）
	MonthlyLegalHolidayNightOvertime int `json:"monthlyLegalHolidayNightOvertime"`

	// MonthlyLegalHolidayOvertime 月の法定休日残業時間（分）
	MonthlyLegalHolidayOvertime int `json:"monthlyLegalHolidayOvertime"`

	// MonthlyNightOvertime 月の深夜残業時間（分）
	MonthlyNightOvertime int `json:"monthlyNightOvertime"`

	// MonthlyOvertime 月の残業時間（分）
	MonthlyOvertime int `json:"monthlyOvertime"`

	// WeeklyGeneralHolidayNightOvertime 週の法定外休日深夜残業時間（分）
	WeeklyGeneralHolidayNightOvertime int `json:"weeklyGeneralHolidayNightOvertime"`

	// WeeklyGeneralHolidayOvertime 週の法定外休日残業時間（分）
	WeeklyGeneralHolidayOvertime int `json:"weeklyGeneralHolidayOvertime"`

	// WeeklyLegalHolidayNightOvertime 週の法定休日深夜残業時間（分）
	WeeklyLegalHolidayNightOvertime int `json:"weeklyLegalHolidayNightOvertime"`

	// WeeklyLegalHolidayOvertime 週の法定休日残業時間（分）
	WeeklyLegalHolidayOvertime int `json:"weeklyLegalHolidayOvertime"`

	// WeeklyNightOvertime 週の深夜残業時間（分）
	WeeklyNightOvertime int `json:"weeklyNightOvertime"`

	// WeeklyOvertime 週の残業時間（分）
	WeeklyOvertime int `json:"weeklyOvertime"`

	// YearlyGeneralHolidayNightOvertime 年の法定外休日深夜残業時間（分）
	YearlyGeneralHolidayNightOvertime int `json:"yearlyGeneralHolidayNightOvertime"`

	// YearlyGeneralHolidayOvertime 年の法定外休日残業時間（分）
	YearlyGeneralHolidayOvertime int `json:"yearlyGeneralHolidayOvertime"`

	// YearlyNightOvertime 年の深夜残業時間（分）
	YearlyNightOvertime int `json:"yearlyNightOvertime"`

	// YearlyOvertime 年の残業時間（分）
	YearlyOvertime int `json:"yearlyOvertime"`
}

// MonthlyWorkingWeeklyWork 週の残業時間
type MonthlyWorkingWeeklyWork struct {
	// GeneralHolidayNightOvertime 法定外休日深夜残業時間（分）
	GeneralHolidayNightOvertime int `json:"generalHolidayNightOvertime"`

	// GeneralHolidayOvertime 法定外休日残業時間（分）
	GeneralHolidayOvertime int `json:"generalHolidayOvertime"`

	// NightOvertime 深夜残業時間（分）
	NightOvertime int `json:"nightOvertime"`

	// Overtime 残業時間（分）
	Overtime int `json:"overtime"`
}

// RequestFlow defines model for request_flow.
type RequestFlow struct {
	// AdministratorKeys 管理者識別キー（管理者コードが変更されても不変）
	AdministratorKeys []string `json:"administratorKeys"`

	// Level 承認フローレベル（１～５）
	Level RequestFlowLevel `json:"level"`
}

// RequestFlowLevel 承認フローレベル（１～５）
type RequestFlowLevel int

// RequestOvertimeApplicant 申請者
type RequestOvertimeApplicant struct {
	// Key 識別キー（従業員 または 管理者）
	Key string `json:"key"`

	// Type 種別（employee： 従業員　administrator： 管理者)
	Type RequestOvertimeApplicantType `json:"type"`
}

// RequestOvertimeApplicantType 種別（employee： 従業員　administrator： 管理者)
type RequestOvertimeApplicantType string

// RequestOvertimeCurrent 現在のスケジュール
type RequestOvertimeCurrent struct {
	// End 終了時刻
	End KotDate `json:"end"`

	// IsBeforeSchedule 勤務予定前の時間外申請か（true 予定前　false： 予定後）
	IsBeforeSchedule bool `json:"isBeforeSchedule"`

	// Start 開始時刻
	Start KotDate `json:"start"`
}

// RequestOvertimeRequested 申請内容
type RequestOvertimeRequested struct {
	// End 終了時刻
	End KotDate `json:"end"`

	// IsBeforeSchedule 勤務予定前の時間外申請か（true 予定前　false： 予定後）
	IsBeforeSchedule bool `json:"isBeforeSchedule"`

	// Start 開始時刻
	Start KotDate `json:"start"`
}

// RequestOvertimeResponse defines model for request_overtime_response.
type RequestOvertimeResponse struct {
	// AdminComment 管理者コメント
	AdminComment string `json:"adminComment"`

	// Applicant 申請者
	Applicant RequestOvertimeApplicant `json:"applicant"`

	// Current 現在のスケジュール
	Current RequestOvertimeCurrent `json:"current"`

	// CurrentFlow 現在の承認フローレベル（１～５）
	CurrentFlow RequestOvertimeResponseCurrentFlow `json:"currentFlow"`

	// Date 対象日
	Date openapi_types.Date `json:"date"`

	// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
	EmployeeKey string `json:"employeeKey"`

	// Flow 承認フロー
	Flow *[]RequestFlow `json:"flow,omitempty"`

	// LastModifiedAdministratorKey 最終更新管理者識別キー
	LastModifiedAdministratorKey string `json:"lastModifiedAdministratorKey"`

	// Message 申請メッセージ
	Message string `json:"message"`

	// RequestKey 申請識別キー
	RequestKey string `json:"requestKey"`

	// Requested 申請内容
	Requested RequestOvertimeRequested `json:"requested"`

	// RequestedDate 申請日
	RequestedDate openapi_types.Date `json:"requestedDate"`

	// Status 申請ステータス（applying 申請中　rejected： 棄却　approved： 承認）
	Status RequestOvertimeResponseStatus `json:"status"`
}

// RequestOvertimeResponseCurrentFlow 現在の承認フローレベル（１～５）
type RequestOvertimeResponseCurrentFlow int

// RequestOvertimeResponseStatus 申請ステータス（applying 申請中　rejected： 棄却　approved： 承認）
type RequestOvertimeResponseStatus string

// WorkingTypeResponse defines model for working_type_response.
type WorkingTypeResponse struct {
	// Code 雇用区分コード
	Code string `json:"code"`

	// Name 雇用区分名
	Name string `json:"name"`
}

// AdditionalFieldsAdministrator defines model for additionalFields_administrator.
type AdditionalFieldsAdministrator = []string

// AdditionalFieldsDailyWorkings defines model for additionalFields_daily-workings.
type AdditionalFieldsDailyWorkings = []string

// AdditionalFieldsEmployee defines model for additionalFields_employee.
type AdditionalFieldsEmployee = []string

// AdditionalFieldsEmployeeGroups defines model for additionalFields_employee-groups.
type AdditionalFieldsEmployeeGroups = []string

// AdditionalFieldsMonthlyWorkings defines model for additionalFields_monthly-workings.
type AdditionalFieldsMonthlyWorkings = []string

// Date defaultは当日
type Date = openapi_types.Date

// DateRequired defaultは当日
type DateRequired = openapi_types.Date

// Division defines model for division.
type Division = string

// EmployeeCode defines model for employeeCode.
type EmployeeCode = string

// EmployeeKey defines model for employeeKey.
type EmployeeKey = string

// EmployeeKeys defines model for employeeKeys.
type EmployeeKeys = []string

// End defaultは当日
type End = openapi_types.Date

// IncludeResigner defines model for includeResigner.
type IncludeResigner = bool

// Ondivision defines model for ondivision.
type Ondivision = bool

// Start defaultは当日
type Start = openapi_types.Date

// Token defines model for token.
type Token = string

// UpdateDate defaultは当日
type UpdateDate = openapi_types.Date

// GetAdministratorsParams defines parameters for GetAdministrators.
type GetAdministratorsParams struct {
	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsAdministrator `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetAdministratorsParamsAdditionalFields defines parameters for GetAdministrators.
type GetAdministratorsParamsAdditionalFields string

// GetDailyWorkingsParams defines parameters for GetDailyWorkings.
type GetDailyWorkingsParams struct {
	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// Ondivision ・true:所属に基づいた勤務データ
	// ・false:出勤先に基づいた勤務データ
	// ・divisionが指定されている場合のみ使用可能
	Ondivision *Ondivision `form:"ondivision,omitempty" json:"ondivision,omitempty"`

	// Start 取得したい期間の開始年月日
	// ・過去日は最大3年前まで
	Start *Start `form:"start,omitempty" json:"start,omitempty"`

	// End 取得したい期間の終了年月日
	// ・startとendは同時に指定
	// ・期間は最大62日
	// ・未来日は最大1年後まで
	End *End `form:"end,omitempty" json:"end,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsDailyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetDailyWorkingsParamsAdditionalFields defines parameters for GetDailyWorkings.
type GetDailyWorkingsParamsAdditionalFields string

// GetDailyWorkingCostsParams defines parameters for GetDailyWorkingCosts.
type GetDailyWorkingCostsParams struct {
	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// Ondivision ・true:所属に基づいた勤務データ
	// ・false:出勤先に基づいた勤務データ
	// ・divisionが指定されている場合のみ使用可能
	Ondivision *Ondivision `form:"ondivision,omitempty" json:"ondivision,omitempty"`

	// Start 取得したい期間の開始年月日
	// ・過去日は最大3年前まで
	Start *Start `form:"start,omitempty" json:"start,omitempty"`

	// End 取得したい期間の終了年月日
	// ・startとendは同時に指定
	// ・期間は最大62日
	// ・未来日は最大1年後まで
	End *End `form:"end,omitempty" json:"end,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsDailyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetDailyWorkingCostsParamsAdditionalFields defines parameters for GetDailyWorkingCosts.
type GetDailyWorkingCostsParamsAdditionalFields string

// GetDailyWorkingCostParams defines parameters for GetDailyWorkingCost.
type GetDailyWorkingCostParams struct {
	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// Ondivision ・true:所属に基づいた勤務データ
	// ・false:出勤先に基づいた勤務データ
	// ・divisionが指定されている場合のみ使用可能
	Ondivision *Ondivision `form:"ondivision,omitempty" json:"ondivision,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsDailyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetDailyWorkingCostParamsAdditionalFields defines parameters for GetDailyWorkingCost.
type GetDailyWorkingCostParamsAdditionalFields string

// GetDailyWorkingTimerecordsParams defines parameters for GetDailyWorkingTimerecords.
type GetDailyWorkingTimerecordsParams struct {
	// EmployeeKeys 従業員識別キー（従業員コードが変更されても不変）
	// ,区切りで複数従業員の指定可能
	// divisionが指定されていない場合のみ使用可能
	EmployeeKeys *EmployeeKeys `form:"employeeKeys,omitempty" json:"employeeKeys,omitempty"`

	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// Ondivision ・true:所属に基づいた勤務データ
	// ・false:出勤先に基づいた勤務データ
	// ・divisionが指定されている場合のみ使用可能
	Ondivision *Ondivision `form:"ondivision,omitempty" json:"ondivision,omitempty"`

	// Start 取得したい期間の開始年月日
	// ・過去日は最大3年前まで
	Start *Start `form:"start,omitempty" json:"start,omitempty"`

	// End 取得したい期間の終了年月日
	// ・startとendは同時に指定
	// ・期間は最大62日
	// ・未来日は最大1年後まで
	End *End `form:"end,omitempty" json:"end,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsDailyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetDailyWorkingTimerecordsParamsAdditionalFields defines parameters for GetDailyWorkingTimerecords.
type GetDailyWorkingTimerecordsParamsAdditionalFields string

// GetDailyWorkingTimerecordParams defines parameters for GetDailyWorkingTimerecord.
type GetDailyWorkingTimerecordParams struct {
	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// Ondivision ・true:所属に基づいた勤務データ
	// ・false:出勤先に基づいた勤務データ
	// ・divisionが指定されている場合のみ使用可能
	Ondivision *Ondivision `form:"ondivision,omitempty" json:"ondivision,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsDailyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetDailyWorkingTimerecordParamsAdditionalFields defines parameters for GetDailyWorkingTimerecord.
type GetDailyWorkingTimerecordParamsAdditionalFields string

// GetDailyWorkingParams defines parameters for GetDailyWorking.
type GetDailyWorkingParams struct {
	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// Ondivision ・true:所属に基づいた勤務データ
	// ・false:出勤先に基づいた勤務データ
	// ・divisionが指定されている場合のみ使用可能
	Ondivision *Ondivision `form:"ondivision,omitempty" json:"ondivision,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsDailyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetDailyWorkingParamsAdditionalFields defines parameters for GetDailyWorking.
type GetDailyWorkingParamsAdditionalFields string

// GetEmployeeGroupsParams defines parameters for GetEmployeeGroups.
type GetEmployeeGroupsParams struct {
	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsEmployeeGroups `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetEmployeeGroupsParamsAdditionalFields defines parameters for GetEmployeeGroups.
type GetEmployeeGroupsParamsAdditionalFields string

// GetEmployeesParams defines parameters for GetEmployees.
type GetEmployeesParams struct {
	// Date 指定された年月日時点での従業員のデータを表示
	// ・過去日は最大3年前まで
	// ・未来日は最大1年後まで
	Date *Date `form:"date,omitempty" json:"date,omitempty"`

	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// IncludeResigner 指定された年月日時点で退職済みの従業員を含む場合 True
	IncludeResigner *IncludeResigner `form:"includeResigner,omitempty" json:"includeResigner,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsEmployee `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetEmployeesParamsAdditionalFields defines parameters for GetEmployees.
type GetEmployeesParamsAdditionalFields string

// GetEmployeeParams defines parameters for GetEmployee.
type GetEmployeeParams struct {
	// Date 指定された年月日時点での従業員のデータを表示
	// ・過去日は最大3年前まで
	// ・未来日は最大1年後まで
	Date *Date `form:"date,omitempty" json:"date,omitempty"`

	// IncludeResigner 指定された年月日時点で退職済みの従業員を含む場合 True
	IncludeResigner *IncludeResigner `form:"includeResigner,omitempty" json:"includeResigner,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsEmployee `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetEmployeeParamsAdditionalFields defines parameters for GetEmployee.
type GetEmployeeParamsAdditionalFields string

// UpdateEmployeeParams defines parameters for UpdateEmployee.
type UpdateEmployeeParams struct {
	// UpdateDate 所属、雇用区分を更新したい年月日
	UpdateDate *UpdateDate `form:"updateDate,omitempty" json:"updateDate,omitempty"`
}

// GetMonthlyWorkingParams defines parameters for GetMonthlyWorking.
type GetMonthlyWorkingParams struct {
	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsMonthlyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetMonthlyWorkingParamsAdditionalFields defines parameters for GetMonthlyWorking.
type GetMonthlyWorkingParamsAdditionalFields string

// GetOvertimeParams defines parameters for GetOvertime.
type GetOvertimeParams struct {
	// AdministratorKey 管理者識別キー（管理者コードが変更されても不変）
	AdministratorKey *string `form:"administratorKey,omitempty" json:"administratorKey,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *[]GetOvertimeParamsAdditionalFields `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetOvertimeParamsAdditionalFields defines parameters for GetOvertime.
type GetOvertimeParamsAdditionalFields string

// GetSchedulesParams defines parameters for GetSchedules.
type GetSchedulesParams struct {
	// AdministratorKey 管理者識別キー（管理者コードが変更されても不変）
	AdministratorKey *string `form:"administratorKey,omitempty" json:"administratorKey,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *[]GetSchedulesParamsAdditionalFields `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetSchedulesParamsAdditionalFields defines parameters for GetSchedules.
type GetSchedulesParamsAdditionalFields string

// RegisterDailyWorkingTimerecordJSONRequestBody defines body for RegisterDailyWorkingTimerecord for application/json ContentType.
type RegisterDailyWorkingTimerecordJSONRequestBody = DailyWorkingTimerecordRequest

// RegisterEmployeeJSONRequestBody defines body for RegisterEmployee for application/json ContentType.
type RegisterEmployeeJSONRequestBody = EmployeeRequest

// UpdateEmployeeJSONRequestBody defines body for UpdateEmployee for application/json ContentType.
type UpdateEmployeeJSONRequestBody = EmployeeRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdministrators request
	GetAdministrators(ctx context.Context, params *GetAdministratorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompany request
	GetCompany(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyWorkings request
	GetDailyWorkings(ctx context.Context, params *GetDailyWorkingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyWorkingCosts request
	GetDailyWorkingCosts(ctx context.Context, params *GetDailyWorkingCostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyWorkingCost request
	GetDailyWorkingCost(ctx context.Context, date DateRequired, params *GetDailyWorkingCostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyWorkingTimerecords request
	GetDailyWorkingTimerecords(ctx context.Context, params *GetDailyWorkingTimerecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyWorkingTimerecord request
	GetDailyWorkingTimerecord(ctx context.Context, date DateRequired, params *GetDailyWorkingTimerecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterDailyWorkingTimerecord request with any body
	RegisterDailyWorkingTimerecordWithBody(ctx context.Context, employeeKey EmployeeKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterDailyWorkingTimerecord(ctx context.Context, employeeKey EmployeeKey, body RegisterDailyWorkingTimerecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyWorking request
	GetDailyWorking(ctx context.Context, date DateRequired, params *GetDailyWorkingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDivisions request
	GetDivisions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployeeGroups request
	GetEmployeeGroups(ctx context.Context, params *GetEmployeeGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployees request
	GetEmployees(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterEmployee request with any body
	RegisterEmployeeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterEmployee(ctx context.Context, body RegisterEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployee request
	GetEmployee(ctx context.Context, employeeCode EmployeeCode, params *GetEmployeeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEmployee request
	DeleteEmployee(ctx context.Context, employeeKey EmployeeKey, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEmployee request with any body
	UpdateEmployeeWithBody(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEmployee(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, body UpdateEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonthlyWorking request
	GetMonthlyWorking(ctx context.Context, date DateRequired, params *GetMonthlyWorkingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOvertime request
	GetOvertime(ctx context.Context, date string, params *GetOvertimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedules request
	GetSchedules(ctx context.Context, date string, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SuspendAccessToken request
	SuspendAccessToken(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshAccessToken request
	RefreshAccessToken(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccessTokenAvailability request
	GetAccessTokenAvailability(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkingTypes request
	GetWorkingTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAdministrators(ctx context.Context, params *GetAdministratorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdministratorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompany(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyWorkings(ctx context.Context, params *GetDailyWorkingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyWorkingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyWorkingCosts(ctx context.Context, params *GetDailyWorkingCostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyWorkingCostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyWorkingCost(ctx context.Context, date DateRequired, params *GetDailyWorkingCostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyWorkingCostRequest(c.Server, date, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyWorkingTimerecords(ctx context.Context, params *GetDailyWorkingTimerecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyWorkingTimerecordsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyWorkingTimerecord(ctx context.Context, date DateRequired, params *GetDailyWorkingTimerecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyWorkingTimerecordRequest(c.Server, date, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterDailyWorkingTimerecordWithBody(ctx context.Context, employeeKey EmployeeKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterDailyWorkingTimerecordRequestWithBody(c.Server, employeeKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterDailyWorkingTimerecord(ctx context.Context, employeeKey EmployeeKey, body RegisterDailyWorkingTimerecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterDailyWorkingTimerecordRequest(c.Server, employeeKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyWorking(ctx context.Context, date DateRequired, params *GetDailyWorkingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyWorkingRequest(c.Server, date, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDivisions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDivisionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployeeGroups(ctx context.Context, params *GetEmployeeGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeeGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployees(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEmployeeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEmployeeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEmployee(ctx context.Context, body RegisterEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEmployeeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployee(ctx context.Context, employeeCode EmployeeCode, params *GetEmployeeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeeRequest(c.Server, employeeCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEmployee(ctx context.Context, employeeKey EmployeeKey, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEmployeeRequest(c.Server, employeeKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEmployeeWithBody(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEmployeeRequestWithBody(c.Server, employeeKey, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEmployee(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, body UpdateEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEmployeeRequest(c.Server, employeeKey, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonthlyWorking(ctx context.Context, date DateRequired, params *GetMonthlyWorkingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonthlyWorkingRequest(c.Server, date, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOvertime(ctx context.Context, date string, params *GetOvertimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOvertimeRequest(c.Server, date, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedules(ctx context.Context, date string, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchedulesRequest(c.Server, date, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuspendAccessToken(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuspendAccessTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshAccessToken(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshAccessTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessTokenAvailability(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessTokenAvailabilityRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkingTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkingTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAdministratorsRequest generates requests for GetAdministrators
func NewGetAdministratorsRequest(server string, params *GetAdministratorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/administrators")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyRequest generates requests for GetCompany
func NewGetCompanyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDailyWorkingsRequest generates requests for GetDailyWorkings
func NewGetDailyWorkingsRequest(server string, params *GetDailyWorkingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ondivision != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ondivision", runtime.ParamLocationQuery, *params.Ondivision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDailyWorkingCostsRequest generates requests for GetDailyWorkingCosts
func NewGetDailyWorkingCostsRequest(server string, params *GetDailyWorkingCostsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings/cost")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ondivision != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ondivision", runtime.ParamLocationQuery, *params.Ondivision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDailyWorkingCostRequest generates requests for GetDailyWorkingCost
func NewGetDailyWorkingCostRequest(server string, date DateRequired, params *GetDailyWorkingCostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings/cost/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ondivision != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ondivision", runtime.ParamLocationQuery, *params.Ondivision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDailyWorkingTimerecordsRequest generates requests for GetDailyWorkingTimerecords
func NewGetDailyWorkingTimerecordsRequest(server string, params *GetDailyWorkingTimerecordsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings/timerecord/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EmployeeKeys != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "employeeKeys", runtime.ParamLocationQuery, *params.EmployeeKeys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ondivision != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ondivision", runtime.ParamLocationQuery, *params.Ondivision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDailyWorkingTimerecordRequest generates requests for GetDailyWorkingTimerecord
func NewGetDailyWorkingTimerecordRequest(server string, date DateRequired, params *GetDailyWorkingTimerecordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings/timerecord/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ondivision != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ondivision", runtime.ParamLocationQuery, *params.Ondivision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterDailyWorkingTimerecordRequest calls the generic RegisterDailyWorkingTimerecord builder with application/json body
func NewRegisterDailyWorkingTimerecordRequest(server string, employeeKey EmployeeKey, body RegisterDailyWorkingTimerecordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterDailyWorkingTimerecordRequestWithBody(server, employeeKey, "application/json", bodyReader)
}

// NewRegisterDailyWorkingTimerecordRequestWithBody generates requests for RegisterDailyWorkingTimerecord with any type of body
func NewRegisterDailyWorkingTimerecordRequestWithBody(server string, employeeKey EmployeeKey, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "employeeKey", runtime.ParamLocationPath, employeeKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings/timerecord/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDailyWorkingRequest generates requests for GetDailyWorking
func NewGetDailyWorkingRequest(server string, date DateRequired, params *GetDailyWorkingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ondivision != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ondivision", runtime.ParamLocationQuery, *params.Ondivision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDivisionsRequest generates requests for GetDivisions
func NewGetDivisionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/divisions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmployeeGroupsRequest generates requests for GetEmployeeGroups
func NewGetEmployeeGroupsRequest(server string, params *GetEmployeeGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employee-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmployeesRequest generates requests for GetEmployees
func NewGetEmployeesRequest(server string, params *GetEmployeesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Date != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeResigner != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeResigner", runtime.ParamLocationQuery, *params.IncludeResigner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterEmployeeRequest calls the generic RegisterEmployee builder with application/json body
func NewRegisterEmployeeRequest(server string, body RegisterEmployeeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterEmployeeRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterEmployeeRequestWithBody generates requests for RegisterEmployee with any type of body
func NewRegisterEmployeeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmployeeRequest generates requests for GetEmployee
func NewGetEmployeeRequest(server string, employeeCode EmployeeCode, params *GetEmployeeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "employeeCode", runtime.ParamLocationPath, employeeCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Date != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeResigner != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeResigner", runtime.ParamLocationQuery, *params.IncludeResigner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEmployeeRequest generates requests for DeleteEmployee
func NewDeleteEmployeeRequest(server string, employeeKey EmployeeKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "employeeKey", runtime.ParamLocationPath, employeeKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEmployeeRequest calls the generic UpdateEmployee builder with application/json body
func NewUpdateEmployeeRequest(server string, employeeKey EmployeeKey, params *UpdateEmployeeParams, body UpdateEmployeeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEmployeeRequestWithBody(server, employeeKey, params, "application/json", bodyReader)
}

// NewUpdateEmployeeRequestWithBody generates requests for UpdateEmployee with any type of body
func NewUpdateEmployeeRequestWithBody(server string, employeeKey EmployeeKey, params *UpdateEmployeeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "employeeKey", runtime.ParamLocationPath, employeeKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UpdateDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateDate", runtime.ParamLocationQuery, *params.UpdateDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMonthlyWorkingRequest generates requests for GetMonthlyWorking
func NewGetMonthlyWorkingRequest(server string, date DateRequired, params *GetMonthlyWorkingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monthly-workings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOvertimeRequest generates requests for GetOvertime
func NewGetOvertimeRequest(server string, date string, params *GetOvertimeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requests/overtimes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AdministratorKey != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "administratorKey", runtime.ParamLocationQuery, *params.AdministratorKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchedulesRequest generates requests for GetSchedules
func NewGetSchedulesRequest(server string, date string, params *GetSchedulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requests/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AdministratorKey != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "administratorKey", runtime.ParamLocationQuery, *params.AdministratorKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSuspendAccessTokenRequest generates requests for SuspendAccessToken
func NewSuspendAccessTokenRequest(server string, token Token) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshAccessTokenRequest generates requests for RefreshAccessToken
func NewRefreshAccessTokenRequest(server string, token Token) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccessTokenAvailabilityRequest generates requests for GetAccessTokenAvailability
func NewGetAccessTokenAvailabilityRequest(server string, token Token) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens/%s/available", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkingTypesRequest generates requests for GetWorkingTypes
func NewGetWorkingTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/working-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdministrators request
	GetAdministratorsWithResponse(ctx context.Context, params *GetAdministratorsParams, reqEditors ...RequestEditorFn) (*GetAdministratorsResponse, error)

	// GetCompany request
	GetCompanyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCompanyResponse, error)

	// GetDailyWorkings request
	GetDailyWorkingsWithResponse(ctx context.Context, params *GetDailyWorkingsParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingsResponse, error)

	// GetDailyWorkingCosts request
	GetDailyWorkingCostsWithResponse(ctx context.Context, params *GetDailyWorkingCostsParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingCostsResponse, error)

	// GetDailyWorkingCost request
	GetDailyWorkingCostWithResponse(ctx context.Context, date DateRequired, params *GetDailyWorkingCostParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingCostResponse, error)

	// GetDailyWorkingTimerecords request
	GetDailyWorkingTimerecordsWithResponse(ctx context.Context, params *GetDailyWorkingTimerecordsParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingTimerecordsResponse, error)

	// GetDailyWorkingTimerecord request
	GetDailyWorkingTimerecordWithResponse(ctx context.Context, date DateRequired, params *GetDailyWorkingTimerecordParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingTimerecordResponse, error)

	// RegisterDailyWorkingTimerecord request with any body
	RegisterDailyWorkingTimerecordWithBodyWithResponse(ctx context.Context, employeeKey EmployeeKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterDailyWorkingTimerecordResponse, error)

	RegisterDailyWorkingTimerecordWithResponse(ctx context.Context, employeeKey EmployeeKey, body RegisterDailyWorkingTimerecordJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterDailyWorkingTimerecordResponse, error)

	// GetDailyWorking request
	GetDailyWorkingWithResponse(ctx context.Context, date DateRequired, params *GetDailyWorkingParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingResponse, error)

	// GetDivisions request
	GetDivisionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDivisionsResponse, error)

	// GetEmployeeGroups request
	GetEmployeeGroupsWithResponse(ctx context.Context, params *GetEmployeeGroupsParams, reqEditors ...RequestEditorFn) (*GetEmployeeGroupsResponse, error)

	// GetEmployees request
	GetEmployeesWithResponse(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*GetEmployeesResponse, error)

	// RegisterEmployee request with any body
	RegisterEmployeeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterEmployeeResponse, error)

	RegisterEmployeeWithResponse(ctx context.Context, body RegisterEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterEmployeeResponse, error)

	// GetEmployee request
	GetEmployeeWithResponse(ctx context.Context, employeeCode EmployeeCode, params *GetEmployeeParams, reqEditors ...RequestEditorFn) (*GetEmployeeResponse, error)

	// DeleteEmployee request
	DeleteEmployeeWithResponse(ctx context.Context, employeeKey EmployeeKey, reqEditors ...RequestEditorFn) (*DeleteEmployeeResponse, error)

	// UpdateEmployee request with any body
	UpdateEmployeeWithBodyWithResponse(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEmployeeResponse, error)

	UpdateEmployeeWithResponse(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, body UpdateEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEmployeeResponse, error)

	// GetMonthlyWorking request
	GetMonthlyWorkingWithResponse(ctx context.Context, date DateRequired, params *GetMonthlyWorkingParams, reqEditors ...RequestEditorFn) (*GetMonthlyWorkingResponse, error)

	// GetOvertime request
	GetOvertimeWithResponse(ctx context.Context, date string, params *GetOvertimeParams, reqEditors ...RequestEditorFn) (*GetOvertimeResponse, error)

	// GetSchedules request
	GetSchedulesWithResponse(ctx context.Context, date string, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*GetSchedulesResponse, error)

	// SuspendAccessToken request
	SuspendAccessTokenWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*SuspendAccessTokenResponse, error)

	// RefreshAccessToken request
	RefreshAccessTokenWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*RefreshAccessTokenResponse, error)

	// GetAccessTokenAvailability request
	GetAccessTokenAvailabilityWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*GetAccessTokenAvailabilityResponse, error)

	// GetWorkingTypes request
	GetWorkingTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkingTypesResponse, error)
}

type GetAdministratorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAdministrators
}

// Status returns HTTPResponse.Status
func (r GetAdministratorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdministratorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCompany
}

// Status returns HTTPResponse.Status
func (r GetCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyWorkingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDailyWorkings
}

// Status returns HTTPResponse.Status
func (r GetDailyWorkingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyWorkingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyWorkingCostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDailyWorkingCosts
}

// Status returns HTTPResponse.Status
func (r GetDailyWorkingCostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyWorkingCostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyWorkingCostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDailyWorkingCost
}

// Status returns HTTPResponse.Status
func (r GetDailyWorkingCostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyWorkingCostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyWorkingTimerecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDailyWorkingTimerecords
}

// Status returns HTTPResponse.Status
func (r GetDailyWorkingTimerecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyWorkingTimerecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyWorkingTimerecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DailyWorkings []DailyWorkingTimerecord `json:"dailyWorkings"`
		Date          openapi_types.Date       `json:"date"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDailyWorkingTimerecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyWorkingTimerecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterDailyWorkingTimerecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegisterDailyWorkingTimerecord
}

// Status returns HTTPResponse.Status
func (r RegisterDailyWorkingTimerecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterDailyWorkingTimerecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyWorkingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDailyWorking
}

// Status returns HTTPResponse.Status
func (r GetDailyWorkingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyWorkingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDivisionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDivisions
}

// Status returns HTTPResponse.Status
func (r GetDivisionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDivisionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeeGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEmployeeGroups
}

// Status returns HTTPResponse.Status
func (r GetEmployeeGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeeGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEmployees
}

// Status returns HTTPResponse.Status
func (r GetEmployeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterEmployeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegisterEmployee
}

// Status returns HTTPResponse.Status
func (r RegisterEmployeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterEmployeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEmployee
}

// Status returns HTTPResponse.Status
func (r GetEmployeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEmployeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEmployeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEmployeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEmployeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateEmployee
}

// Status returns HTTPResponse.Status
func (r UpdateEmployeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEmployeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonthlyWorkingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMonthlyWorking
}

// Status returns HTTPResponse.Status
func (r GetMonthlyWorkingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonthlyWorkingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOvertimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetOvertime
}

// Status returns HTTPResponse.Status
func (r GetOvertimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOvertimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSchedules
}

// Status returns HTTPResponse.Status
func (r GetSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SuspendAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SuspendAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SuspendAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RefreshAccessToken
}

// Status returns HTTPResponse.Status
func (r RefreshAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccessTokenAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccessTokenAvailability
}

// Status returns HTTPResponse.Status
func (r GetAccessTokenAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccessTokenAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkingTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkingTypeResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkingTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkingTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdministratorsWithResponse request returning *GetAdministratorsResponse
func (c *ClientWithResponses) GetAdministratorsWithResponse(ctx context.Context, params *GetAdministratorsParams, reqEditors ...RequestEditorFn) (*GetAdministratorsResponse, error) {
	rsp, err := c.GetAdministrators(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdministratorsResponse(rsp)
}

// GetCompanyWithResponse request returning *GetCompanyResponse
func (c *ClientWithResponses) GetCompanyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCompanyResponse, error) {
	rsp, err := c.GetCompany(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyResponse(rsp)
}

// GetDailyWorkingsWithResponse request returning *GetDailyWorkingsResponse
func (c *ClientWithResponses) GetDailyWorkingsWithResponse(ctx context.Context, params *GetDailyWorkingsParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingsResponse, error) {
	rsp, err := c.GetDailyWorkings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyWorkingsResponse(rsp)
}

// GetDailyWorkingCostsWithResponse request returning *GetDailyWorkingCostsResponse
func (c *ClientWithResponses) GetDailyWorkingCostsWithResponse(ctx context.Context, params *GetDailyWorkingCostsParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingCostsResponse, error) {
	rsp, err := c.GetDailyWorkingCosts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyWorkingCostsResponse(rsp)
}

// GetDailyWorkingCostWithResponse request returning *GetDailyWorkingCostResponse
func (c *ClientWithResponses) GetDailyWorkingCostWithResponse(ctx context.Context, date DateRequired, params *GetDailyWorkingCostParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingCostResponse, error) {
	rsp, err := c.GetDailyWorkingCost(ctx, date, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyWorkingCostResponse(rsp)
}

// GetDailyWorkingTimerecordsWithResponse request returning *GetDailyWorkingTimerecordsResponse
func (c *ClientWithResponses) GetDailyWorkingTimerecordsWithResponse(ctx context.Context, params *GetDailyWorkingTimerecordsParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingTimerecordsResponse, error) {
	rsp, err := c.GetDailyWorkingTimerecords(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyWorkingTimerecordsResponse(rsp)
}

// GetDailyWorkingTimerecordWithResponse request returning *GetDailyWorkingTimerecordResponse
func (c *ClientWithResponses) GetDailyWorkingTimerecordWithResponse(ctx context.Context, date DateRequired, params *GetDailyWorkingTimerecordParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingTimerecordResponse, error) {
	rsp, err := c.GetDailyWorkingTimerecord(ctx, date, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyWorkingTimerecordResponse(rsp)
}

// RegisterDailyWorkingTimerecordWithBodyWithResponse request with arbitrary body returning *RegisterDailyWorkingTimerecordResponse
func (c *ClientWithResponses) RegisterDailyWorkingTimerecordWithBodyWithResponse(ctx context.Context, employeeKey EmployeeKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterDailyWorkingTimerecordResponse, error) {
	rsp, err := c.RegisterDailyWorkingTimerecordWithBody(ctx, employeeKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterDailyWorkingTimerecordResponse(rsp)
}

func (c *ClientWithResponses) RegisterDailyWorkingTimerecordWithResponse(ctx context.Context, employeeKey EmployeeKey, body RegisterDailyWorkingTimerecordJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterDailyWorkingTimerecordResponse, error) {
	rsp, err := c.RegisterDailyWorkingTimerecord(ctx, employeeKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterDailyWorkingTimerecordResponse(rsp)
}

// GetDailyWorkingWithResponse request returning *GetDailyWorkingResponse
func (c *ClientWithResponses) GetDailyWorkingWithResponse(ctx context.Context, date DateRequired, params *GetDailyWorkingParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingResponse, error) {
	rsp, err := c.GetDailyWorking(ctx, date, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyWorkingResponse(rsp)
}

// GetDivisionsWithResponse request returning *GetDivisionsResponse
func (c *ClientWithResponses) GetDivisionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDivisionsResponse, error) {
	rsp, err := c.GetDivisions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDivisionsResponse(rsp)
}

// GetEmployeeGroupsWithResponse request returning *GetEmployeeGroupsResponse
func (c *ClientWithResponses) GetEmployeeGroupsWithResponse(ctx context.Context, params *GetEmployeeGroupsParams, reqEditors ...RequestEditorFn) (*GetEmployeeGroupsResponse, error) {
	rsp, err := c.GetEmployeeGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeeGroupsResponse(rsp)
}

// GetEmployeesWithResponse request returning *GetEmployeesResponse
func (c *ClientWithResponses) GetEmployeesWithResponse(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*GetEmployeesResponse, error) {
	rsp, err := c.GetEmployees(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeesResponse(rsp)
}

// RegisterEmployeeWithBodyWithResponse request with arbitrary body returning *RegisterEmployeeResponse
func (c *ClientWithResponses) RegisterEmployeeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterEmployeeResponse, error) {
	rsp, err := c.RegisterEmployeeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEmployeeResponse(rsp)
}

func (c *ClientWithResponses) RegisterEmployeeWithResponse(ctx context.Context, body RegisterEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterEmployeeResponse, error) {
	rsp, err := c.RegisterEmployee(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEmployeeResponse(rsp)
}

// GetEmployeeWithResponse request returning *GetEmployeeResponse
func (c *ClientWithResponses) GetEmployeeWithResponse(ctx context.Context, employeeCode EmployeeCode, params *GetEmployeeParams, reqEditors ...RequestEditorFn) (*GetEmployeeResponse, error) {
	rsp, err := c.GetEmployee(ctx, employeeCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeeResponse(rsp)
}

// DeleteEmployeeWithResponse request returning *DeleteEmployeeResponse
func (c *ClientWithResponses) DeleteEmployeeWithResponse(ctx context.Context, employeeKey EmployeeKey, reqEditors ...RequestEditorFn) (*DeleteEmployeeResponse, error) {
	rsp, err := c.DeleteEmployee(ctx, employeeKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEmployeeResponse(rsp)
}

// UpdateEmployeeWithBodyWithResponse request with arbitrary body returning *UpdateEmployeeResponse
func (c *ClientWithResponses) UpdateEmployeeWithBodyWithResponse(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEmployeeResponse, error) {
	rsp, err := c.UpdateEmployeeWithBody(ctx, employeeKey, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEmployeeResponse(rsp)
}

func (c *ClientWithResponses) UpdateEmployeeWithResponse(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, body UpdateEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEmployeeResponse, error) {
	rsp, err := c.UpdateEmployee(ctx, employeeKey, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEmployeeResponse(rsp)
}

// GetMonthlyWorkingWithResponse request returning *GetMonthlyWorkingResponse
func (c *ClientWithResponses) GetMonthlyWorkingWithResponse(ctx context.Context, date DateRequired, params *GetMonthlyWorkingParams, reqEditors ...RequestEditorFn) (*GetMonthlyWorkingResponse, error) {
	rsp, err := c.GetMonthlyWorking(ctx, date, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonthlyWorkingResponse(rsp)
}

// GetOvertimeWithResponse request returning *GetOvertimeResponse
func (c *ClientWithResponses) GetOvertimeWithResponse(ctx context.Context, date string, params *GetOvertimeParams, reqEditors ...RequestEditorFn) (*GetOvertimeResponse, error) {
	rsp, err := c.GetOvertime(ctx, date, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOvertimeResponse(rsp)
}

// GetSchedulesWithResponse request returning *GetSchedulesResponse
func (c *ClientWithResponses) GetSchedulesWithResponse(ctx context.Context, date string, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*GetSchedulesResponse, error) {
	rsp, err := c.GetSchedules(ctx, date, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchedulesResponse(rsp)
}

// SuspendAccessTokenWithResponse request returning *SuspendAccessTokenResponse
func (c *ClientWithResponses) SuspendAccessTokenWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*SuspendAccessTokenResponse, error) {
	rsp, err := c.SuspendAccessToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuspendAccessTokenResponse(rsp)
}

// RefreshAccessTokenWithResponse request returning *RefreshAccessTokenResponse
func (c *ClientWithResponses) RefreshAccessTokenWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*RefreshAccessTokenResponse, error) {
	rsp, err := c.RefreshAccessToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshAccessTokenResponse(rsp)
}

// GetAccessTokenAvailabilityWithResponse request returning *GetAccessTokenAvailabilityResponse
func (c *ClientWithResponses) GetAccessTokenAvailabilityWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*GetAccessTokenAvailabilityResponse, error) {
	rsp, err := c.GetAccessTokenAvailability(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessTokenAvailabilityResponse(rsp)
}

// GetWorkingTypesWithResponse request returning *GetWorkingTypesResponse
func (c *ClientWithResponses) GetWorkingTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkingTypesResponse, error) {
	rsp, err := c.GetWorkingTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkingTypesResponse(rsp)
}

// ParseGetAdministratorsResponse parses an HTTP response from a GetAdministratorsWithResponse call
func ParseGetAdministratorsResponse(rsp *http.Response) (*GetAdministratorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdministratorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAdministrators
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyResponse parses an HTTP response from a GetCompanyWithResponse call
func ParseGetCompanyResponse(rsp *http.Response) (*GetCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCompany
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDailyWorkingsResponse parses an HTTP response from a GetDailyWorkingsWithResponse call
func ParseGetDailyWorkingsResponse(rsp *http.Response) (*GetDailyWorkingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyWorkingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDailyWorkings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDailyWorkingCostsResponse parses an HTTP response from a GetDailyWorkingCostsWithResponse call
func ParseGetDailyWorkingCostsResponse(rsp *http.Response) (*GetDailyWorkingCostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyWorkingCostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDailyWorkingCosts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDailyWorkingCostResponse parses an HTTP response from a GetDailyWorkingCostWithResponse call
func ParseGetDailyWorkingCostResponse(rsp *http.Response) (*GetDailyWorkingCostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyWorkingCostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDailyWorkingCost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDailyWorkingTimerecordsResponse parses an HTTP response from a GetDailyWorkingTimerecordsWithResponse call
func ParseGetDailyWorkingTimerecordsResponse(rsp *http.Response) (*GetDailyWorkingTimerecordsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyWorkingTimerecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDailyWorkingTimerecords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDailyWorkingTimerecordResponse parses an HTTP response from a GetDailyWorkingTimerecordWithResponse call
func ParseGetDailyWorkingTimerecordResponse(rsp *http.Response) (*GetDailyWorkingTimerecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyWorkingTimerecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DailyWorkings []DailyWorkingTimerecord `json:"dailyWorkings"`
			Date          openapi_types.Date       `json:"date"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterDailyWorkingTimerecordResponse parses an HTTP response from a RegisterDailyWorkingTimerecordWithResponse call
func ParseRegisterDailyWorkingTimerecordResponse(rsp *http.Response) (*RegisterDailyWorkingTimerecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterDailyWorkingTimerecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegisterDailyWorkingTimerecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetDailyWorkingResponse parses an HTTP response from a GetDailyWorkingWithResponse call
func ParseGetDailyWorkingResponse(rsp *http.Response) (*GetDailyWorkingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyWorkingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDailyWorking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDivisionsResponse parses an HTTP response from a GetDivisionsWithResponse call
func ParseGetDivisionsResponse(rsp *http.Response) (*GetDivisionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDivisionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDivisions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmployeeGroupsResponse parses an HTTP response from a GetEmployeeGroupsWithResponse call
func ParseGetEmployeeGroupsResponse(rsp *http.Response) (*GetEmployeeGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeeGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEmployeeGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmployeesResponse parses an HTTP response from a GetEmployeesWithResponse call
func ParseGetEmployeesResponse(rsp *http.Response) (*GetEmployeesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEmployees
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterEmployeeResponse parses an HTTP response from a RegisterEmployeeWithResponse call
func ParseRegisterEmployeeResponse(rsp *http.Response) (*RegisterEmployeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterEmployeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegisterEmployee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetEmployeeResponse parses an HTTP response from a GetEmployeeWithResponse call
func ParseGetEmployeeResponse(rsp *http.Response) (*GetEmployeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEmployee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteEmployeeResponse parses an HTTP response from a DeleteEmployeeWithResponse call
func ParseDeleteEmployeeResponse(rsp *http.Response) (*DeleteEmployeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEmployeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateEmployeeResponse parses an HTTP response from a UpdateEmployeeWithResponse call
func ParseUpdateEmployeeResponse(rsp *http.Response) (*UpdateEmployeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEmployeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateEmployee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMonthlyWorkingResponse parses an HTTP response from a GetMonthlyWorkingWithResponse call
func ParseGetMonthlyWorkingResponse(rsp *http.Response) (*GetMonthlyWorkingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonthlyWorkingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMonthlyWorking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOvertimeResponse parses an HTTP response from a GetOvertimeWithResponse call
func ParseGetOvertimeResponse(rsp *http.Response) (*GetOvertimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOvertimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetOvertime
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSchedulesResponse parses an HTTP response from a GetSchedulesWithResponse call
func ParseGetSchedulesResponse(rsp *http.Response) (*GetSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSchedules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSuspendAccessTokenResponse parses an HTTP response from a SuspendAccessTokenWithResponse call
func ParseSuspendAccessTokenResponse(rsp *http.Response) (*SuspendAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SuspendAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRefreshAccessTokenResponse parses an HTTP response from a RefreshAccessTokenWithResponse call
func ParseRefreshAccessTokenResponse(rsp *http.Response) (*RefreshAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RefreshAccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAccessTokenAvailabilityResponse parses an HTTP response from a GetAccessTokenAvailabilityWithResponse call
func ParseGetAccessTokenAvailabilityResponse(rsp *http.Response) (*GetAccessTokenAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccessTokenAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccessTokenAvailability
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkingTypesResponse parses an HTTP response from a GetWorkingTypesWithResponse call
func ParseGetWorkingTypesResponse(rsp *http.Response) (*GetWorkingTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkingTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkingTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
