// Package kotclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package kotclient

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for GetCompanySettingsDecimalTreatType.
const (
	Round     GetCompanySettingsDecimalTreatType = "round"
	RoundDown GetCompanySettingsDecimalTreatType = "roundDown"
	RoundUp   GetCompanySettingsDecimalTreatType = "roundUp"
)

// Defines values for GetCompanySettingsTimeDisplayFormat.
const (
	Decimal     GetCompanySettingsTimeDisplayFormat = "decimal"
	Sexagesimal GetCompanySettingsTimeDisplayFormat = "sexagesimal"
)

// Defines values for GetDailyWorkingTimerecordsCurrentDateEmployeeGender.
const (
	GetDailyWorkingTimerecordsCurrentDateEmployeeGenderFemale     GetDailyWorkingTimerecordsCurrentDateEmployeeGender = "female"
	GetDailyWorkingTimerecordsCurrentDateEmployeeGenderMale       GetDailyWorkingTimerecordsCurrentDateEmployeeGender = "male"
	GetDailyWorkingTimerecordsCurrentDateEmployeeGenderNoSelected GetDailyWorkingTimerecordsCurrentDateEmployeeGender = "no_selected"
)

// Defines values for GetEmployeeGender.
const (
	GetEmployeeGenderFemale GetEmployeeGender = "female"
	GetEmployeeGenderMale   GetEmployeeGender = "male"
)

// Defines values for GetEmployeesItemGender.
const (
	GetEmployeesItemGenderFemale GetEmployeesItemGender = "female"
	GetEmployeesItemGenderMale   GetEmployeesItemGender = "male"
)

// Defines values for GetOvertimesOvertimeRequestsCurrentFlow.
const (
	GetOvertimesOvertimeRequestsCurrentFlowN1 GetOvertimesOvertimeRequestsCurrentFlow = 1
	GetOvertimesOvertimeRequestsCurrentFlowN2 GetOvertimesOvertimeRequestsCurrentFlow = 2
	GetOvertimesOvertimeRequestsCurrentFlowN3 GetOvertimesOvertimeRequestsCurrentFlow = 3
	GetOvertimesOvertimeRequestsCurrentFlowN4 GetOvertimesOvertimeRequestsCurrentFlow = 4
	GetOvertimesOvertimeRequestsCurrentFlowN5 GetOvertimesOvertimeRequestsCurrentFlow = 5
)

// Defines values for GetOvertimesOvertimeRequestsStatus.
const (
	GetOvertimesOvertimeRequestsStatusApplying GetOvertimesOvertimeRequestsStatus = "applying"
	GetOvertimesOvertimeRequestsStatusApproved GetOvertimesOvertimeRequestsStatus = "approved"
	GetOvertimesOvertimeRequestsStatusRejected GetOvertimesOvertimeRequestsStatus = "rejected"
)

// Defines values for GetSchedulesScheduleRequestsApplicantType.
const (
	GetSchedulesScheduleRequestsApplicantTypeAdministrator GetSchedulesScheduleRequestsApplicantType = "administrator"
	GetSchedulesScheduleRequestsApplicantTypeEmployee      GetSchedulesScheduleRequestsApplicantType = "employee"
)

// Defines values for GetSchedulesScheduleRequestsCurrentFlow.
const (
	GetSchedulesScheduleRequestsCurrentFlowN1 GetSchedulesScheduleRequestsCurrentFlow = 1
	GetSchedulesScheduleRequestsCurrentFlowN2 GetSchedulesScheduleRequestsCurrentFlow = 2
	GetSchedulesScheduleRequestsCurrentFlowN3 GetSchedulesScheduleRequestsCurrentFlow = 3
	GetSchedulesScheduleRequestsCurrentFlowN4 GetSchedulesScheduleRequestsCurrentFlow = 4
	GetSchedulesScheduleRequestsCurrentFlowN5 GetSchedulesScheduleRequestsCurrentFlow = 5
)

// Defines values for GetSchedulesScheduleRequestsFlowLevel.
const (
	GetSchedulesScheduleRequestsFlowLevelN1 GetSchedulesScheduleRequestsFlowLevel = 1
	GetSchedulesScheduleRequestsFlowLevelN2 GetSchedulesScheduleRequestsFlowLevel = 2
	GetSchedulesScheduleRequestsFlowLevelN3 GetSchedulesScheduleRequestsFlowLevel = 3
	GetSchedulesScheduleRequestsFlowLevelN4 GetSchedulesScheduleRequestsFlowLevel = 4
	GetSchedulesScheduleRequestsFlowLevelN5 GetSchedulesScheduleRequestsFlowLevel = 5
)

// Defines values for GetSchedulesScheduleRequestsStatus.
const (
	GetSchedulesScheduleRequestsStatusApplying GetSchedulesScheduleRequestsStatus = "applying"
	GetSchedulesScheduleRequestsStatusApproved GetSchedulesScheduleRequestsStatus = "approved"
	GetSchedulesScheduleRequestsStatusRejected GetSchedulesScheduleRequestsStatus = "rejected"
)

// Defines values for RegisterEmployeeGender.
const (
	RegisterEmployeeGenderFemale RegisterEmployeeGender = "female"
	RegisterEmployeeGenderMale   RegisterEmployeeGender = "male"
)

// Defines values for UpdateEmployeeGender.
const (
	UpdateEmployeeGenderFemale UpdateEmployeeGender = "female"
	UpdateEmployeeGenderMale   UpdateEmployeeGender = "male"
)

// Defines values for DailyWorkingCurrentDateEmployeeGender.
const (
	DailyWorkingCurrentDateEmployeeGenderFemale     DailyWorkingCurrentDateEmployeeGender = "female"
	DailyWorkingCurrentDateEmployeeGenderMale       DailyWorkingCurrentDateEmployeeGender = "male"
	DailyWorkingCurrentDateEmployeeGenderNoSelected DailyWorkingCurrentDateEmployeeGender = "no_selected"
)

// Defines values for DailyWorkingCustomDailyWorkingCalculationUnitCode.
const (
	DailyWorkingCustomDailyWorkingCalculationUnitCodeN1 DailyWorkingCustomDailyWorkingCalculationUnitCode = 1
	DailyWorkingCustomDailyWorkingCalculationUnitCodeN2 DailyWorkingCustomDailyWorkingCalculationUnitCode = 2
	DailyWorkingCustomDailyWorkingCalculationUnitCodeN4 DailyWorkingCustomDailyWorkingCalculationUnitCode = 4
)

// Defines values for DailyWorkingResponseAutoBreakOff.
const (
	DailyWorkingResponseAutoBreakOffN1 DailyWorkingResponseAutoBreakOff = 1
	DailyWorkingResponseAutoBreakOffN2 DailyWorkingResponseAutoBreakOff = 2
	DailyWorkingResponseAutoBreakOffN3 DailyWorkingResponseAutoBreakOff = 3
)

// Defines values for DailyWorkingTimerecordCode.
const (
	DailyWorkingTimerecordCodeN1 DailyWorkingTimerecordCode = "1"
	DailyWorkingTimerecordCodeN2 DailyWorkingTimerecordCode = "2"
	DailyWorkingTimerecordCodeN3 DailyWorkingTimerecordCode = "3"
	DailyWorkingTimerecordCodeN4 DailyWorkingTimerecordCode = "4"
	DailyWorkingTimerecordCodeN7 DailyWorkingTimerecordCode = "7"
	DailyWorkingTimerecordCodeN8 DailyWorkingTimerecordCode = "8"
)

// Defines values for DailyWorkingTimerecordRequestCode.
const (
	DailyWorkingTimerecordRequestCodeN1 DailyWorkingTimerecordRequestCode = "1"
	DailyWorkingTimerecordRequestCodeN2 DailyWorkingTimerecordRequestCode = "2"
	DailyWorkingTimerecordRequestCodeN3 DailyWorkingTimerecordRequestCode = "3"
	DailyWorkingTimerecordRequestCodeN4 DailyWorkingTimerecordRequestCode = "4"
	DailyWorkingTimerecordRequestCodeN7 DailyWorkingTimerecordRequestCode = "7"
	DailyWorkingTimerecordRequestCodeN8 DailyWorkingTimerecordRequestCode = "8"
)

// Defines values for EmployeeRequestGender.
const (
	Female EmployeeRequestGender = "female"
	Male   EmployeeRequestGender = "male"
)

// Defines values for RequestFlowLevel.
const (
	RequestFlowLevelN1 RequestFlowLevel = 1
	RequestFlowLevelN2 RequestFlowLevel = 2
	RequestFlowLevelN3 RequestFlowLevel = 3
	RequestFlowLevelN4 RequestFlowLevel = 4
	RequestFlowLevelN5 RequestFlowLevel = 5
)

// Defines values for RequestOvertimeApplicantType.
const (
	RequestOvertimeApplicantTypeAdministrator RequestOvertimeApplicantType = "administrator"
	RequestOvertimeApplicantTypeEmployee      RequestOvertimeApplicantType = "employee"
)

// Defines values for GetAdministratorsParamsAdditionalFields.
const (
	GetAdministratorsParamsAdditionalFieldsAssociatedEmployees GetAdministratorsParamsAdditionalFields = "associatedEmployees"
	GetAdministratorsParamsAdditionalFieldsEmailAddresses      GetAdministratorsParamsAdditionalFields = "emailAddresses"
)

// Defines values for GetDailyWorkingsParamsAdditionalFields.
const (
	GetDailyWorkingsParamsAdditionalFieldsCurrentDateEmployee GetDailyWorkingsParamsAdditionalFields = "currentDateEmployee"
)

// Defines values for GetDailyWorkingTimerecordsParamsAdditionalFields.
const (
	GetDailyWorkingTimerecordsParamsAdditionalFieldsCurrentDateEmployee GetDailyWorkingTimerecordsParamsAdditionalFields = "currentDateEmployee"
)

// Defines values for GetDailyWorkingTimerecordParamsAdditionalFields.
const (
	GetDailyWorkingTimerecordParamsAdditionalFieldsCurrentDateEmployee GetDailyWorkingTimerecordParamsAdditionalFields = "currentDateEmployee"
)

// Defines values for GetDailyWorkingParamsAdditionalFields.
const (
	GetDailyWorkingParamsAdditionalFieldsCurrentDateEmployee GetDailyWorkingParamsAdditionalFields = "currentDateEmployee"
)

// Defines values for GetEmployeeGroupsParamsAdditionalFields.
const (
	Category GetEmployeeGroupsParamsAdditionalFields = "category"
)

// Defines values for GetEmployeesParamsAdditionalFields.
const (
	GetEmployeesParamsAdditionalFieldsAllDayRegardingWorkInMinute GetEmployeesParamsAdditionalFields = "allDayRegardingWorkInMinute"
	GetEmployeesParamsAdditionalFieldsBirthDate                   GetEmployeesParamsAdditionalFields = "birthDate"
	GetEmployeesParamsAdditionalFieldsEmailAddresses              GetEmployeesParamsAdditionalFields = "emailAddresses"
	GetEmployeesParamsAdditionalFieldsFirstNamePhonetics          GetEmployeesParamsAdditionalFields = "firstNamePhonetics"
	GetEmployeesParamsAdditionalFieldsHiredDate                   GetEmployeesParamsAdditionalFields = "hiredDate"
	GetEmployeesParamsAdditionalFieldsLastNamePhonetics           GetEmployeesParamsAdditionalFields = "lastNamePhonetics"
	GetEmployeesParamsAdditionalFieldsResignationDate             GetEmployeesParamsAdditionalFields = "resignationDate"
)

// Defines values for GetEmployeeParamsAdditionalFields.
const (
	AllDayRegardingWorkInMinute GetEmployeeParamsAdditionalFields = "allDayRegardingWorkInMinute"
	BirthDate                   GetEmployeeParamsAdditionalFields = "birthDate"
	EmailAddresses              GetEmployeeParamsAdditionalFields = "emailAddresses"
	FirstNamePhonetics          GetEmployeeParamsAdditionalFields = "firstNamePhonetics"
	HiredDate                   GetEmployeeParamsAdditionalFields = "hiredDate"
	LastNamePhonetics           GetEmployeeParamsAdditionalFields = "lastNamePhonetics"
	ResignationDate             GetEmployeeParamsAdditionalFields = "resignationDate"
)

// Defines values for GetOvertimesParamsAdditionalFields.
const (
	GetOvertimesParamsAdditionalFieldsFlow                GetOvertimesParamsAdditionalFields = "flow"
	GetOvertimesParamsAdditionalFieldsNote                GetOvertimesParamsAdditionalFields = "note"
	GetOvertimesParamsAdditionalFieldsSchedulePatternCode GetOvertimesParamsAdditionalFields = "schedulePatternCode"
	GetOvertimesParamsAdditionalFieldsSchedulePatternName GetOvertimesParamsAdditionalFields = "schedulePatternName"
	GetOvertimesParamsAdditionalFieldsWorkFixedEnd        GetOvertimesParamsAdditionalFields = "workFixedEnd"
	GetOvertimesParamsAdditionalFieldsWorkFixedStart      GetOvertimesParamsAdditionalFields = "workFixedStart"
)

// Defines values for GetSchedulesParamsAdditionalFields.
const (
	GetSchedulesParamsAdditionalFieldsFlow                GetSchedulesParamsAdditionalFields = "flow"
	GetSchedulesParamsAdditionalFieldsNote                GetSchedulesParamsAdditionalFields = "note"
	GetSchedulesParamsAdditionalFieldsSchedulePatternCode GetSchedulesParamsAdditionalFields = "schedulePatternCode"
	GetSchedulesParamsAdditionalFieldsSchedulePatternName GetSchedulesParamsAdditionalFields = "schedulePatternName"
	GetSchedulesParamsAdditionalFieldsWorkFixedEnd        GetSchedulesParamsAdditionalFields = "workFixedEnd"
	GetSchedulesParamsAdditionalFieldsWorkFixedStart      GetSchedulesParamsAdditionalFields = "workFixedStart"
)

// GetAccessTokenAvailability defines model for GetAccessTokenAvailability.
type GetAccessTokenAvailability struct {
	Available bool `json:"available"`
}

// GetAdministrators defines model for GetAdministrators.
type GetAdministrators = []GetAdministratorsItem

// GetAdministratorsAssociatedEmployee 割当従業員
type GetAdministratorsAssociatedEmployee struct {
	// Code 従業員コード
	Code string `json:"code"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// Key 従業員識別キー（従業員コードが変更されても不変）
	Key string `json:"key"`

	// LastName 姓
	LastName string `json:"lastName"`
}

// GetAdministratorsItem defines model for GetAdministrators_item.
type GetAdministratorsItem struct {
	AssociatedEmployees *[]GetAdministratorsAssociatedEmployee `json:"associatedEmployees,omitempty"`

	// Code 管理者コード
	Code string `json:"code"`

	// EmailAddresses メールアドレス
	EmailAddresses *openapi_types.Email `json:"emailAddresses,omitempty"`

	// Key 管理者識別キー（管理者コードが変更されても不変）
	Key string `json:"key"`

	// Name 管理者名
	Name string `json:"name"`
}

// GetCompany defines model for GetCompany.
type GetCompany struct {
	// BusinessYearStartDate 事業年度開始日
	BusinessYearStartDate string `json:"businessYearStartDate"`

	// Code 企業コード
	Code string `json:"code"`

	// Host ホスト名
	Host string `json:"host"`

	// Key 企業識別キー
	Key string `json:"key"`

	// Name 企業名
	Name string `json:"name"`

	// Settings 企業設定情報
	Settings GetCompanySettings `json:"settings"`
}

// GetCompanySettings 企業設定情報
type GetCompanySettings struct {
	// DecimalTreatType 10進表示の小数第3位の扱い（roundDown： 切下げ　roundUp： 切上げ　round： 四捨五入）
	DecimalTreatType GetCompanySettingsDecimalTreatType `json:"decimalTreatType"`

	// TimeDisplayFormat 表示形式（decimal： 10進法　sexagesimal： 60進法）
	TimeDisplayFormat GetCompanySettingsTimeDisplayFormat `json:"timeDisplayFormat"`
}

// GetCompanySettingsDecimalTreatType 10進表示の小数第3位の扱い（roundDown： 切下げ　roundUp： 切上げ　round： 四捨五入）
type GetCompanySettingsDecimalTreatType string

// GetCompanySettingsTimeDisplayFormat 表示形式（decimal： 10進法　sexagesimal： 60進法）
type GetCompanySettingsTimeDisplayFormat string

// GetDailyWorking defines model for GetDailyWorking.
type GetDailyWorking struct {
	DailyWorkings []DailyWorkingResponse `json:"dailyWorkings"`
	Date          openapi_types.Date     `json:"date"`
}

// GetDailyWorkingTimerecords defines model for GetDailyWorkingTimerecords.
type GetDailyWorkingTimerecords struct {
	// CurrentDateEmployee 今日時点の従業員データ
	CurrentDateEmployee *struct {
		// Code 従業員コード
		Code string `json:"code"`

		// DivisionCode 所属コード
		DivisionCode string `json:"divisionCode"`

		// DivisionName 所属名
		DivisionName string `json:"divisionName"`

		// EmployeeGroups 従業員グループ情報
		EmployeeGroups []struct {
			// Code 従業員グループコード
			Code string `json:"code"`

			// Name 従業員グループ名
			Name string `json:"name"`
		} `json:"employeeGroups"`

		// FirstName 名
		FirstName string `json:"firstName"`

		// FirstNamePhonetics 名（カナ）
		FirstNamePhonetics string `json:"firstNamePhonetics"`

		// Gender 性別（no_selected： 選択しない　male： 男性　female： 女性）
		Gender GetDailyWorkingTimerecordsCurrentDateEmployeeGender `json:"gender"`

		// LastName 姓
		LastName string `json:"lastName"`

		// LastNamePhonetics 姓（カナ）
		LastNamePhonetics string `json:"lastNamePhonetics"`

		// TypeCode 雇用区分コード
		TypeCode string `json:"typeCode"`

		// TypeName 雇用区分名
		TypeName string `json:"typeName"`
	} `json:"currentDateEmployee,omitempty"`

	// Date 日時
	Date openapi_types.Date `json:"date"`

	// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
	EmployeeKey string `json:"employeeKey"`

	// TimeRecord 打刻
	TimeRecord []DailyWorkingTimerecord `json:"timeRecord"`
}

// GetDailyWorkingTimerecordsCurrentDateEmployeeGender 性別（no_selected： 選択しない　male： 男性　female： 女性）
type GetDailyWorkingTimerecordsCurrentDateEmployeeGender string

// GetDailyWorkings defines model for GetDailyWorkings.
type GetDailyWorkings = []struct {
	DailyWorkings []DailyWorkingResponse `json:"dailyWorkings"`
	Date          openapi_types.Date     `json:"date"`
}

// GetDivisions defines model for GetDivisions.
type GetDivisions = []DivisionResponse

// GetEmployee defines model for GetEmployee.
type GetEmployee struct {
	// AllDayRegardingWorkInMinute 日の契約労働時間
	AllDayRegardingWorkInMinute *int `json:"allDayRegardingWorkInMinute,omitempty"`

	// BirthDate 生年月日
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmailAddresses メールアドレス
	EmailAddresses *[]openapi_types.Email `json:"emailAddresses,omitempty"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []EmployeeGroup `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics *string `json:"firstNamePhonetics,omitempty"`

	// Gender 性別（male： 男性　female： 女性）
	Gender GetEmployeeGender `json:"gender"`

	// HiredDate 入社年月日
	HiredDate *openapi_types.Date `json:"hiredDate,omitempty"`

	// Key 従業員識別キー（従業員コードが変更されても不変）
	Key string `json:"key"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics *string `json:"lastNamePhonetics,omitempty"`

	// ResignationDate 退職年月日
	ResignationDate *openapi_types.Date `json:"resignationDate,omitempty"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// GetEmployeeGender 性別（male： 男性　female： 女性）
type GetEmployeeGender string

// GetEmployeeGroups defines model for GetEmployeeGroups.
type GetEmployeeGroups = []GetEmployeeGroupsItem

// GetEmployeeGroupsItem defines model for GetEmployeeGroups_item.
type GetEmployeeGroupsItem struct {
	// Category 従業員グループカテゴリ
	Category *GetEmployeeGroupsItemCategory `json:"category,omitempty"`

	// Code 従業員グループコード
	Code string `json:"code"`

	// Name 従業員グループ名
	Name string `json:"name"`
}

// GetEmployeeGroupsItemCategory 従業員グループカテゴリ
type GetEmployeeGroupsItemCategory struct {
	// Code 従業員グループカテゴリコード
	Code string `json:"code"`

	// Name 従業員グループカテゴリ名
	Name string `json:"name"`
}

// GetEmployees defines model for GetEmployees.
type GetEmployees = []GetEmployeesItem

// GetEmployeesItem defines model for GetEmployees_item.
type GetEmployeesItem struct {
	// AllDayRegardingWorkInMinute 日の契約労働時間
	AllDayRegardingWorkInMinute *int `json:"allDayRegardingWorkInMinute,omitempty"`

	// BirthDate 生年月日
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmailAddresses メールアドレス
	EmailAddresses *[]openapi_types.Email `json:"emailAddresses,omitempty"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []EmployeeGroup `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics *string `json:"firstNamePhonetics,omitempty"`

	// Gender 性別（male： 男性　female： 女性）
	Gender GetEmployeesItemGender `json:"gender"`

	// HiredDate 入社年月日
	HiredDate *openapi_types.Date `json:"hiredDate,omitempty"`

	// Key 従業員識別キー（従業員コードが変更されても不変）
	Key string `json:"key"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics *string `json:"lastNamePhonetics,omitempty"`

	// ResignationDate 退職年月日
	ResignationDate *openapi_types.Date `json:"resignationDate,omitempty"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// GetEmployeesItemGender 性別（male： 男性　female： 女性）
type GetEmployeesItemGender string

// GetOvertimes defines model for GetOvertimes.
type GetOvertimes struct {
	Month            int `json:"month"`
	OvertimeRequests []struct {
		// AdminComment 管理者コメント
		AdminComment string `json:"adminComment"`

		// Applicant 申請者
		Applicant RequestOvertimeApplicant `json:"applicant"`

		// Current 現在のスケジュール
		Current RequestOvertimeCurrent `json:"current"`

		// CurrentFlow 現在の承認フローレベル（１～５）
		CurrentFlow GetOvertimesOvertimeRequestsCurrentFlow `json:"currentFlow"`

		// Date 対象日
		Date openapi_types.Date `json:"date"`

		// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
		EmployeeKey string `json:"employeeKey"`

		// Flow 承認フロー
		Flow *[]RequestFlow `json:"flow,omitempty"`

		// LastModifiedAdministratorKey 最終更新管理者識別キー
		LastModifiedAdministratorKey string `json:"lastModifiedAdministratorKey"`

		// Message 申請メッセージ
		Message string `json:"message"`

		// RequestKey 申請識別キー
		RequestKey string `json:"requestKey"`

		// Requested 申請内容
		Requested RequestOvertimeRequested `json:"requested"`

		// RequestedDate 申請日
		RequestedDate openapi_types.Date `json:"requestedDate"`

		// Status 申請ステータス（applying 申請中　rejected： 棄却　approved： 承認）
		Status GetOvertimesOvertimeRequestsStatus `json:"status"`
	} `json:"overtimeRequests"`
	Year int `json:"year"`
}

// GetOvertimesOvertimeRequestsCurrentFlow 現在の承認フローレベル（１～５）
type GetOvertimesOvertimeRequestsCurrentFlow int

// GetOvertimesOvertimeRequestsStatus 申請ステータス（applying 申請中　rejected： 棄却　approved： 承認）
type GetOvertimesOvertimeRequestsStatus string

// GetSchedules defines model for GetSchedules.
type GetSchedules struct {
	Month            int32 `json:"month"`
	ScheduleRequests []struct {
		// AdminComment 管理者コメント
		AdminComment string `json:"adminComment"`
		Applicant    struct {
			// Key 識別キー（従業員 または 管理者）
			Key string `json:"key"`

			// Type 種別（employee： 従業員　administrator： 管理者)
			Type GetSchedulesScheduleRequestsApplicantType `json:"type"`
		} `json:"applicant"`
		Current struct {
			// BreakSchedule 休憩予定時間（分）
			BreakSchedule int32 `json:"breakSchedule"`

			// ClockInSchedule 出勤予定時間
			ClockInSchedule KotDate `json:"clockInSchedule"`

			// ClockOutSchedule 退勤予定時間
			ClockOutSchedule KotDate `json:"clockOutSchedule"`

			// HolidaysObtained 休暇取得
			HolidaysObtained struct {
				FulltimeHoliday struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// Name 休暇区分名
					Name string `json:"name"`
				} `json:"fulltimeHoliday"`
				HalfdayHolidays []struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// Name 休暇区分名
					Name string `json:"name"`

					// TypeName 半休種別名
					TypeName string `json:"typeName"`
				} `json:"halfdayHolidays"`
				HourHolidays []struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// End 休暇終了予定
					End KotDate `json:"end"`

					// Minutes 休暇取得時間
					Minutes int32 `json:"minutes"`

					// Name 休暇区分名
					Name string `json:"name"`

					// Start 休暇開始予定
					Start KotDate `json:"start"`
				} `json:"hourHolidays"`
			} `json:"holidaysObtained"`

			// OvertimeUpperLimit 残業上限時間（分）
			OvertimeUpperLimit *int32 `json:"overtimeUpperLimit,omitempty"`

			// ScheduleTypeName スケジュール種別
			ScheduleTypeName string `json:"scheduleTypeName"`

			// StartEndBreakSchedule 休憩開始終了予定
			StartEndBreakSchedule []struct {
				// End 休憩終了予定
				End KotDate `json:"end"`

				// Start 休憩開始予定
				Start KotDate `json:"start"`
			} `json:"startEndBreakSchedule"`

			// SubstitutionClockInName 振替出勤
			SubstitutionClockInName string `json:"substitutionClockInName"`

			// WorkDayTypeName 勤務日種別名
			WorkDayTypeName string `json:"workDayTypeName"`

			// WorkPlaceDivisionCode 出勤先所属コード
			WorkPlaceDivisionCode string `json:"workPlaceDivisionCode"`

			// WorkPlaceDivisionName 出勤先所属名
			WorkPlaceDivisionName string `json:"workPlaceDivisionName"`
		} `json:"current"`

		// CurrentFlow 現在の承認フローレベル（１～５）
		CurrentFlow GetSchedulesScheduleRequestsCurrentFlow `json:"currentFlow"`

		// Date 対象日
		Date openapi_types.Date `json:"date"`

		// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
		EmployeeKey string `json:"employeeKey"`

		// Flow 承認フロー
		Flow *[]struct {
			// AdministratorKeys 管理者識別キー（管理者コードが変更されても不変）
			AdministratorKeys []string `json:"administratorKeys"`

			// Level 承認フローレベル（１～５）
			Level GetSchedulesScheduleRequestsFlowLevel `json:"level"`
		} `json:"flow,omitempty"`

		// LastModifiedAdministratorKey 最終更新管理者識別キー
		LastModifiedAdministratorKey string `json:"lastModifiedAdministratorKey"`

		// Message 申請メッセージ
		Message string `json:"message"`

		// Note 備考
		Note *string `json:"note,omitempty"`

		// RequestKey 申請識別キー
		RequestKey string `json:"requestKey"`
		Requested  struct {
			// BreakSchedule 休憩予定時間（分）
			BreakSchedule int32 `json:"breakSchedule"`

			// ClockInSchedule 出勤予定時間
			ClockInSchedule KotDate `json:"clockInSchedule"`

			// ClockOutSchedule 退勤予定時間
			ClockOutSchedule KotDate `json:"clockOutSchedule"`

			// HolidaysObtained 休暇取得
			HolidaysObtained struct {
				FulltimeHoliday struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// Name 休暇区分名
					Name string `json:"name"`
				} `json:"fulltimeHoliday"`
				HalfdayHolidays []struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// Name 休暇区分名
					Name string `json:"name"`

					// TypeName 半休種別名
					TypeName string `json:"typeName"`
				} `json:"halfdayHolidays"`
				HourHolidays []struct {
					// Code 休暇区分コード
					Code int `json:"code"`

					// End 休暇終了予定
					End KotDate `json:"end"`

					// Minutes 休暇取得時間
					Minutes int32 `json:"minutes"`

					// Name 休暇区分名
					Name string `json:"name"`

					// Start 休暇開始予定
					Start KotDate `json:"start"`
				} `json:"hourHolidays"`
			} `json:"holidaysObtained"`

			// OvertimeUpperLimit 残業上限時間（分）
			OvertimeUpperLimit *int32 `json:"overtimeUpperLimit,omitempty"`

			// ScheduleTypeName スケジュール種別
			ScheduleTypeName string `json:"scheduleTypeName"`

			// StartEndBreakSchedule 休憩開始終了予定
			StartEndBreakSchedule []struct {
				// End 休憩終了予定
				End KotDate `json:"end"`

				// Start 休憩開始予定
				Start KotDate `json:"start"`
			} `json:"startEndBreakSchedule"`

			// SubstitutionClockInName 振替出勤
			SubstitutionClockInName string `json:"substitutionClockInName"`

			// WorkDayTypeName 勤務日種別名
			WorkDayTypeName string `json:"workDayTypeName"`

			// WorkPlaceDivisionCode 出勤先所属コード
			WorkPlaceDivisionCode string `json:"workPlaceDivisionCode"`

			// WorkPlaceDivisionName 出勤先所属名
			WorkPlaceDivisionName string `json:"workPlaceDivisionName"`
		} `json:"requested"`

		// RequestedDate 申請日
		RequestedDate openapi_types.Date `json:"requestedDate"`

		// SchedulePatternCode スケジュールパターンコード
		SchedulePatternCode *string `json:"schedulePatternCode,omitempty"`

		// SchedulePatternName スケジュールパターン名
		SchedulePatternName *string `json:"schedulePatternName,omitempty"`

		// Status 申請ステータス（applying 申請中　rejected： 棄却　approved： 承認）
		Status GetSchedulesScheduleRequestsStatus `json:"status"`

		// WorkFixedEnd 勤務終了刻限
		WorkFixedEnd *KotDate `json:"workFixedEnd,omitempty"`

		// WorkFixedStart 勤務開始刻限
		WorkFixedStart *KotDate `json:"workFixedStart,omitempty"`
	} `json:"scheduleRequests"`
	Year int32 `json:"year"`
}

// GetSchedulesScheduleRequestsApplicantType 種別（employee： 従業員　administrator： 管理者)
type GetSchedulesScheduleRequestsApplicantType string

// GetSchedulesScheduleRequestsCurrentFlow 現在の承認フローレベル（１～５）
type GetSchedulesScheduleRequestsCurrentFlow int32

// GetSchedulesScheduleRequestsFlowLevel 承認フローレベル（１～５）
type GetSchedulesScheduleRequestsFlowLevel int

// GetSchedulesScheduleRequestsStatus 申請ステータス（applying 申請中　rejected： 棄却　approved： 承認）
type GetSchedulesScheduleRequestsStatus string

// RefreshAccessToken defines model for RefreshAccessToken.
type RefreshAccessToken struct {
	// Token refreshed access token
	Token string `json:"token"`
}

// RegisterDailyWorkingTimerecord defines model for RegisterDailyWorkingTimerecord.
type RegisterDailyWorkingTimerecord struct {
	// Date 日時
	Date openapi_types.Date `json:"date"`

	// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
	EmployeeKey string `json:"employeeKey"`

	// TimeRecord 打刻
	TimeRecord DailyWorkingTimerecord `json:"timeRecord"`
}

// RegisterEmployee defines model for RegisterEmployee.
type RegisterEmployee struct {
	// AllDayRegardingWorkInMinute 日の契約労働時間
	AllDayRegardingWorkInMinute *int `json:"allDayRegardingWorkInMinute,omitempty"`

	// BirthDate 生年月日
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmailAddresses メールアドレス
	EmailAddresses *[]openapi_types.Email `json:"emailAddresses,omitempty"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []EmployeeGroup `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics *string `json:"firstNamePhonetics,omitempty"`

	// Gender 性別（male： 男性　female： 女性）
	Gender RegisterEmployeeGender `json:"gender"`

	// HiredDate 入社年月日
	HiredDate *openapi_types.Date `json:"hiredDate,omitempty"`

	// Key 従業員識別キー（従業員コードが変更されても不変）
	Key string `json:"key"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics *string `json:"lastNamePhonetics,omitempty"`

	// ResignationDate 退職年月日
	ResignationDate *openapi_types.Date `json:"resignationDate,omitempty"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// RegisterEmployeeGender 性別（male： 男性　female： 女性）
type RegisterEmployeeGender string

// UpdateEmployee defines model for UpdateEmployee.
type UpdateEmployee struct {
	// AllDayRegardingWorkInMinute 日の契約労働時間
	AllDayRegardingWorkInMinute *int `json:"allDayRegardingWorkInMinute,omitempty"`

	// BirthDate 生年月日
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmailAddresses メールアドレス
	EmailAddresses *[]openapi_types.Email `json:"emailAddresses,omitempty"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []struct {
		// Code 従業員グループコード
		Code string `json:"code"`

		// Name 従業員グループ名
		Name string `json:"name"`
	} `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics *string `json:"firstNamePhonetics,omitempty"`

	// Gender 性別（male： 男性　female： 女性）
	Gender UpdateEmployeeGender `json:"gender"`

	// HiredDate 入社年月日
	HiredDate *openapi_types.Date `json:"hiredDate,omitempty"`

	// Key 従業員識別キー（従業員コードが変更されても不変）
	Key string `json:"key"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics *string `json:"lastNamePhonetics,omitempty"`

	// ResignationDate 退職年月日
	ResignationDate *openapi_types.Date `json:"resignationDate,omitempty"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// UpdateEmployeeGender 性別（male： 男性　female： 女性）
type UpdateEmployeeGender string

// DailyWorkingCurrentDateEmployee 今日時点の従業員データ
type DailyWorkingCurrentDateEmployee struct {
	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 所属名
	DivisionName string `json:"divisionName"`

	// EmployeeGroups 従業員グループ情報
	EmployeeGroups []EmployeeGroup `json:"employeeGroups"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics string `json:"firstNamePhonetics"`

	// Gender 性別（no_selected： 選択しない　male： 男性　female： 女性）
	Gender DailyWorkingCurrentDateEmployeeGender `json:"gender"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics string `json:"lastNamePhonetics"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`

	// TypeName 雇用区分名
	TypeName string `json:"typeName"`
}

// DailyWorkingCurrentDateEmployeeGender 性別（no_selected： 選択しない　male： 男性　female： 女性）
type DailyWorkingCurrentDateEmployeeGender string

// DailyWorkingCustomDailyWorking defines model for daily_working_custom_daily_working.
type DailyWorkingCustomDailyWorking struct {
	// CalculationResult 計算結果
	CalculationResult int `json:"calculationResult"`

	// CalculationUnitCode 計算単位コード（1： 日数　2： 時間　4： 数値）
	CalculationUnitCode DailyWorkingCustomDailyWorkingCalculationUnitCode `json:"calculationUnitCode"`

	// Code 日別カスタム表示コード
	Code string `json:"code"`

	// Name 日別カスタム表示名
	Name string `json:"name"`
}

// DailyWorkingCustomDailyWorkingCalculationUnitCode 計算単位コード（1： 日数　2： 時間　4： 数値）
type DailyWorkingCustomDailyWorkingCalculationUnitCode int

// DailyWorkingFulltimeHoliday defines model for daily_working_fulltime_holiday.
type DailyWorkingFulltimeHoliday struct {
	// Code 休暇区分コード
	Code int `json:"code"`

	// Name 休暇区分名
	Name string `json:"name"`
}

// DailyWorkingHalfdayHoliday defines model for daily_working_halfday_holiday.
type DailyWorkingHalfdayHoliday struct {
	// Code 休暇区分コード
	Code int `json:"code"`

	// Name 休暇区分名
	Name string `json:"name"`

	// TypeName 半休種別名
	TypeName string `json:"typeName"`
}

// DailyWorkingHolidaysObtained 休暇取得
type DailyWorkingHolidaysObtained struct {
	FulltimeHoliday DailyWorkingFulltimeHoliday  `json:"fulltimeHoliday"`
	HalfdayHolidays []DailyWorkingHalfdayHoliday `json:"halfdayHolidays"`
	HourHolidays    []DailyWorkingHourHoliday    `json:"hourHolidays"`
}

// DailyWorkingHourHoliday defines model for daily_working_hour_holiday.
type DailyWorkingHourHoliday struct {
	// Code 休暇区分コード
	Code int `json:"code"`

	// End 休暇終了時間
	End time.Time `json:"end"`

	// Minutes 休暇取得時間
	Minutes int `json:"minutes"`

	// Name 休暇区分名
	Name string `json:"name"`

	// Start 休暇開始時間
	Start time.Time `json:"start"`
}

// DailyWorkingResponse defines model for daily_working_response.
type DailyWorkingResponse struct {
	// Assigned 所定時間（分）
	Assigned int `json:"assigned"`

	// AutoBreakOff 自動休憩無効（null： 休憩を無効化しない 1：　雇用区分休憩無効　2： スケジュール休憩無効　3： 全ての自動休憩無効）
	AutoBreakOff DailyWorkingResponseAutoBreakOff `json:"autoBreakOff"`

	// BreakTime 休憩時間（分）
	BreakTime int `json:"breakTime"`

	// CurrentDateEmployee 今日時点の従業員データ
	CurrentDateEmployee *DailyWorkingCurrentDateEmployee `json:"currentDateEmployee,omitempty"`
	CustomDailyWorkings []DailyWorkingCustomDailyWorking `json:"customDailyWorkings"`

	// Date 日時
	Date openapi_types.Date `json:"date"`

	// DiscretionaryVacation 休暇みなし時間（分）
	DiscretionaryVacation int `json:"discretionaryVacation"`

	// EarlyLeave 早退時間（分）
	EarlyLeave int `json:"earlyLeave"`

	// EmployeeKey 従業員識別キー（従業員コードが変更されても不変）
	EmployeeKey string `json:"employeeKey"`

	// HolidaysObtained 休暇取得
	HolidaysObtained DailyWorkingHolidaysObtained `json:"holidaysObtained"`

	// IsClosing 締め状況
	IsClosing bool `json:"isClosing"`

	// IsError エラー勤務状況
	IsError bool `json:"isError"`

	// IsHelp ヘルプ勤務状況
	IsHelp bool `json:"isHelp"`

	// Late 遅刻時間（分）
	Late int `json:"late"`

	// LateNight 深夜時間（分）
	LateNight int `json:"lateNight"`

	// LateNightOvertime 深夜残業時間（分）
	LateNightOvertime int `json:"lateNightOvertime"`

	// LateNightUnassigned 深夜所定外時間（分）
	LateNightUnassigned int `json:"lateNightUnassigned"`

	// Overtime 残業時間（分）
	Overtime int `json:"overtime"`

	// TotalWork 労働合計時間（分）
	TotalWork int `json:"totalWork"`

	// Unassigned 所定外時間（分）
	Unassigned int `json:"unassigned"`

	// WorkPlaceDivisionCode 出勤先所属コード
	WorkPlaceDivisionCode string `json:"workPlaceDivisionCode"`

	// WorkPlaceDivisionName 出勤先所属名
	WorkPlaceDivisionName *string `json:"workPlaceDivisionName,omitempty"`

	// WorkdayTypeName 勤務日種別名
	WorkdayTypeName string `json:"workdayTypeName"`
}

// DailyWorkingResponseAutoBreakOff 自動休憩無効（null： 休憩を無効化しない 1：　雇用区分休憩無効　2： スケジュール休憩無効　3： 全ての自動休憩無効）
type DailyWorkingResponseAutoBreakOff int

// DailyWorkingTimerecord 打刻
type DailyWorkingTimerecord struct {
	// Code 打刻種別コード
	Code DailyWorkingTimerecordCode `json:"code"`

	// DivisionCode 打刻所属コード
	DivisionCode string `json:"divisionCode"`

	// DivisionName 打刻所属名
	DivisionName string `json:"divisionName"`

	// Latitude 緯度
	Latitude float64 `json:"latitude"`

	// Longitude 経度
	Longitude float64 `json:"longitude"`

	// Name 打刻種別名
	Name string `json:"name"`

	// Time 打刻時間
	Time time.Time `json:"time"`
}

// DailyWorkingTimerecordCode 打刻種別コード
type DailyWorkingTimerecordCode string

// DailyWorkingTimerecordRequest defines model for daily_working_timerecord_request.
type DailyWorkingTimerecordRequest struct {
	// Code 打刻種別コード（1： 出勤　2： 退勤　3： 休憩開始　4： 休憩終了　7： 外出入　8： 外出戻）
	// 省略時は、KING OF TIMEの処理に従って打刻種別を決定します。
	Code *DailyWorkingTimerecordRequestCode `json:"code,omitempty"`

	// Date 勤務日
	// 指定された勤務日に打刻データが紐づきます。
	Date openapi_types.Date `json:"date"`

	// DivisionCode 打刻先所属コード
	// 省略時は、該当従業員が所属している所属を打刻先所属として扱います。
	DivisionCode *string `json:"divisionCode,omitempty"`

	// Latitude 緯度
	Latitude *float64 `json:"latitude,omitempty"`

	// Longitude 経度
	Longitude *float64 `json:"longitude,omitempty"`

	// Time 打刻時間
	Time time.Time `json:"time"`
}

// DailyWorkingTimerecordRequestCode 打刻種別コード（1： 出勤　2： 退勤　3： 休憩開始　4： 休憩終了　7： 外出入　8： 外出戻）
// 省略時は、KING OF TIMEの処理に従って打刻種別を決定します。
type DailyWorkingTimerecordRequestCode string

// DivisionResponse defines model for division_response.
type DivisionResponse struct {
	// Code 所属コード
	Code string `json:"code"`

	// DayBorderTime 所属名
	DayBorderTime string `json:"dayBorderTime"`

	// Name 所属名
	Name string `json:"name"`
}

// EmployeeGroup defines model for employee_group.
type EmployeeGroup struct {
	// Code 従業員グループコード
	Code string `json:"code"`

	// Name 従業員グループ名
	Name string `json:"name"`
}

// EmployeeRequest defines model for employee_request.
type EmployeeRequest struct {
	// AllDayRegardingWorkInMinute 日の契約労働時間
	AllDayRegardingWorkInMinute *int `json:"allDayRegardingWorkInMinute,omitempty"`

	// BirthDate 生年月日
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Code 従業員コード
	Code string `json:"code"`

	// DivisionCode 所属コード
	DivisionCode string `json:"divisionCode"`

	// EmailAddresses メールアドレス
	EmailAddresses *[]openapi_types.Email `json:"emailAddresses,omitempty"`

	// FirstName 名
	FirstName string `json:"firstName"`

	// FirstNamePhonetics 名（カナ）
	FirstNamePhonetics *string `json:"firstNamePhonetics,omitempty"`

	// Gender 性別（male： 男性　female： 女性）
	Gender EmployeeRequestGender `json:"gender"`

	// HiredDate 入社年月日
	HiredDate *openapi_types.Date `json:"hiredDate,omitempty"`

	// LastName 姓
	LastName string `json:"lastName"`

	// LastNamePhonetics 姓（カナ）
	LastNamePhonetics *string `json:"lastNamePhonetics,omitempty"`

	// ResignationDate 退職年月日
	ResignationDate *openapi_types.Date `json:"resignationDate,omitempty"`

	// TypeCode 雇用区分コード
	TypeCode string `json:"typeCode"`
}

// EmployeeRequestGender 性別（male： 男性　female： 女性）
type EmployeeRequestGender string

// RequestFlow defines model for request_flow.
type RequestFlow struct {
	// AdministratorKeys 管理者識別キー（管理者コードが変更されても不変）
	AdministratorKeys []string `json:"administratorKeys"`

	// Level 承認フローレベル（１～５）
	Level RequestFlowLevel `json:"level"`
}

// RequestFlowLevel 承認フローレベル（１～５）
type RequestFlowLevel int

// RequestOvertimeApplicant 申請者
type RequestOvertimeApplicant struct {
	// Key 識別キー（従業員 または 管理者）
	Key string `json:"key"`

	// Type 種別（employee： 従業員　administrator： 管理者)
	Type RequestOvertimeApplicantType `json:"type"`
}

// RequestOvertimeApplicantType 種別（employee： 従業員　administrator： 管理者)
type RequestOvertimeApplicantType string

// RequestOvertimeCurrent 現在のスケジュール
type RequestOvertimeCurrent struct {
	// End 終了時刻
	End KotDate `json:"end"`

	// IsBeforeSchedule 勤務予定前の時間外申請か（true 予定前　false： 予定後）
	IsBeforeSchedule bool `json:"isBeforeSchedule"`

	// Start 開始時刻
	Start KotDate `json:"start"`
}

// RequestOvertimeRequested 申請内容
type RequestOvertimeRequested struct {
	// End 終了時刻
	End KotDate `json:"end"`

	// IsBeforeSchedule 勤務予定前の時間外申請か（true 予定前　false： 予定後）
	IsBeforeSchedule bool `json:"isBeforeSchedule"`

	// Start 開始時刻
	Start KotDate `json:"start"`
}

// WorkingTypeResponse defines model for working_type_response.
type WorkingTypeResponse struct {
	// Code 雇用区分コード
	Code string `json:"code"`

	// Name 雇用区分名
	Name string `json:"name"`
}

// AdditionalFieldsAdministrator defines model for additionalFields_administrator.
type AdditionalFieldsAdministrator = []string

// AdditionalFieldsDailyWorkings defines model for additionalFields_daily-workings.
type AdditionalFieldsDailyWorkings = []string

// AdditionalFieldsEmployee defines model for additionalFields_employee.
type AdditionalFieldsEmployee = []string

// AdditionalFieldsEmployeeGroups defines model for additionalFields_employee-groups.
type AdditionalFieldsEmployeeGroups = []string

// Date defaultは当日
type Date = openapi_types.Date

// DateRequired defaultは当日
type DateRequired = openapi_types.Date

// Division defines model for division.
type Division = string

// EmployeeCode defines model for employeeCode.
type EmployeeCode = string

// EmployeeKey defines model for employeeKey.
type EmployeeKey = string

// EmployeeKeys defines model for employeeKeys.
type EmployeeKeys = []string

// End defaultは当日
type End = openapi_types.Date

// IncludeResigner defines model for includeResigner.
type IncludeResigner = bool

// Ondivision defines model for ondivision.
type Ondivision = bool

// Start defaultは当日
type Start = openapi_types.Date

// Token defines model for token.
type Token = string

// UpdateDate defaultは当日
type UpdateDate = openapi_types.Date

// GetAdministratorsParams defines parameters for GetAdministrators.
type GetAdministratorsParams struct {
	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsAdministrator `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetAdministratorsParamsAdditionalFields defines parameters for GetAdministrators.
type GetAdministratorsParamsAdditionalFields string

// GetDailyWorkingsParams defines parameters for GetDailyWorkings.
type GetDailyWorkingsParams struct {
	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// Ondivision ・true:所属に基づいた勤務データ
	// ・false:出勤先に基づいた勤務データ
	// ・divisionが指定されている場合のみ使用可能
	Ondivision *Ondivision `form:"ondivision,omitempty" json:"ondivision,omitempty"`

	// Start 取得したい期間の開始年月日
	// ・過去日は最大3年前まで
	Start *Start `form:"start,omitempty" json:"start,omitempty"`

	// End 取得したい期間の終了年月日
	// ・startとendは同時に指定
	// ・期間は最大62日
	// ・未来日は最大1年後まで
	End *End `form:"end,omitempty" json:"end,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsDailyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetDailyWorkingsParamsAdditionalFields defines parameters for GetDailyWorkings.
type GetDailyWorkingsParamsAdditionalFields string

// GetDailyWorkingTimerecordsParams defines parameters for GetDailyWorkingTimerecords.
type GetDailyWorkingTimerecordsParams struct {
	// EmployeeKeys 従業員識別キー（従業員コードが変更されても不変）
	// ,区切りで複数従業員の指定可能
	// divisionが指定されていない場合のみ使用可能
	EmployeeKeys *EmployeeKeys `form:"employeeKeys,omitempty" json:"employeeKeys,omitempty"`

	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// Ondivision ・true:所属に基づいた勤務データ
	// ・false:出勤先に基づいた勤務データ
	// ・divisionが指定されている場合のみ使用可能
	Ondivision *Ondivision `form:"ondivision,omitempty" json:"ondivision,omitempty"`

	// Start 取得したい期間の開始年月日
	// ・過去日は最大3年前まで
	Start *Start `form:"start,omitempty" json:"start,omitempty"`

	// End 取得したい期間の終了年月日
	// ・startとendは同時に指定
	// ・期間は最大62日
	// ・未来日は最大1年後まで
	End *End `form:"end,omitempty" json:"end,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsDailyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetDailyWorkingTimerecordsParamsAdditionalFields defines parameters for GetDailyWorkingTimerecords.
type GetDailyWorkingTimerecordsParamsAdditionalFields string

// GetDailyWorkingTimerecordParams defines parameters for GetDailyWorkingTimerecord.
type GetDailyWorkingTimerecordParams struct {
	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// Ondivision ・true:所属に基づいた勤務データ
	// ・false:出勤先に基づいた勤務データ
	// ・divisionが指定されている場合のみ使用可能
	Ondivision *Ondivision `form:"ondivision,omitempty" json:"ondivision,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsDailyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetDailyWorkingTimerecordParamsAdditionalFields defines parameters for GetDailyWorkingTimerecord.
type GetDailyWorkingTimerecordParamsAdditionalFields string

// GetDailyWorkingParams defines parameters for GetDailyWorking.
type GetDailyWorkingParams struct {
	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// Ondivision ・true:所属に基づいた勤務データ
	// ・false:出勤先に基づいた勤務データ
	// ・divisionが指定されている場合のみ使用可能
	Ondivision *Ondivision `form:"ondivision,omitempty" json:"ondivision,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsDailyWorkings `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetDailyWorkingParamsAdditionalFields defines parameters for GetDailyWorking.
type GetDailyWorkingParamsAdditionalFields string

// GetEmployeeGroupsParams defines parameters for GetEmployeeGroups.
type GetEmployeeGroupsParams struct {
	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsEmployeeGroups `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetEmployeeGroupsParamsAdditionalFields defines parameters for GetEmployeeGroups.
type GetEmployeeGroupsParamsAdditionalFields string

// GetEmployeesParams defines parameters for GetEmployees.
type GetEmployeesParams struct {
	// Date 指定された年月日時点での従業員のデータを表示
	// ・過去日は最大3年前まで
	// ・未来日は最大1年後まで
	Date *Date `form:"date,omitempty" json:"date,omitempty"`

	// Division 所属コード
	Division *Division `form:"division,omitempty" json:"division,omitempty"`

	// IncludeResigner 指定された年月日時点で退職済みの従業員を含む場合 True
	IncludeResigner *IncludeResigner `form:"includeResigner,omitempty" json:"includeResigner,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsEmployee `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetEmployeesParamsAdditionalFields defines parameters for GetEmployees.
type GetEmployeesParamsAdditionalFields string

// GetEmployeeParams defines parameters for GetEmployee.
type GetEmployeeParams struct {
	// Date 指定された年月日時点での従業員のデータを表示
	// ・過去日は最大3年前まで
	// ・未来日は最大1年後まで
	Date *Date `form:"date,omitempty" json:"date,omitempty"`

	// IncludeResigner 指定された年月日時点で退職済みの従業員を含む場合 True
	IncludeResigner *IncludeResigner `form:"includeResigner,omitempty" json:"includeResigner,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *AdditionalFieldsEmployee `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetEmployeeParamsAdditionalFields defines parameters for GetEmployee.
type GetEmployeeParamsAdditionalFields string

// UpdateEmployeeParams defines parameters for UpdateEmployee.
type UpdateEmployeeParams struct {
	// UpdateDate 所属、雇用区分を更新したい年月日
	UpdateDate *UpdateDate `form:"updateDate,omitempty" json:"updateDate,omitempty"`
}

// GetOvertimesParams defines parameters for GetOvertimes.
type GetOvertimesParams struct {
	// AdministratorKey 管理者識別キー（管理者コードが変更されても不変）
	AdministratorKey *string `form:"administratorKey,omitempty" json:"administratorKey,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *[]GetOvertimesParamsAdditionalFields `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetOvertimesParamsAdditionalFields defines parameters for GetOvertimes.
type GetOvertimesParamsAdditionalFields string

// GetSchedulesParams defines parameters for GetSchedules.
type GetSchedulesParams struct {
	// AdministratorKey 管理者識別キー（管理者コードが変更されても不変）
	AdministratorKey *string `form:"administratorKey,omitempty" json:"administratorKey,omitempty"`

	// AdditionalFields 指定されたプロパティをレスポンスに追加
	AdditionalFields *[]GetSchedulesParamsAdditionalFields `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`
}

// GetSchedulesParamsAdditionalFields defines parameters for GetSchedules.
type GetSchedulesParamsAdditionalFields string

// RegisterDailyWorkingTimerecordJSONRequestBody defines body for RegisterDailyWorkingTimerecord for application/json ContentType.
type RegisterDailyWorkingTimerecordJSONRequestBody = DailyWorkingTimerecordRequest

// RegisterEmployeeJSONRequestBody defines body for RegisterEmployee for application/json ContentType.
type RegisterEmployeeJSONRequestBody = EmployeeRequest

// UpdateEmployeeJSONRequestBody defines body for UpdateEmployee for application/json ContentType.
type UpdateEmployeeJSONRequestBody = EmployeeRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdministrators request
	GetAdministrators(ctx context.Context, params *GetAdministratorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompany request
	GetCompany(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyWorkings request
	GetDailyWorkings(ctx context.Context, params *GetDailyWorkingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyWorkingTimerecords request
	GetDailyWorkingTimerecords(ctx context.Context, params *GetDailyWorkingTimerecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyWorkingTimerecord request
	GetDailyWorkingTimerecord(ctx context.Context, date DateRequired, params *GetDailyWorkingTimerecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterDailyWorkingTimerecord request with any body
	RegisterDailyWorkingTimerecordWithBody(ctx context.Context, employeeKey EmployeeKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterDailyWorkingTimerecord(ctx context.Context, employeeKey EmployeeKey, body RegisterDailyWorkingTimerecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyWorking request
	GetDailyWorking(ctx context.Context, date DateRequired, params *GetDailyWorkingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDivisions request
	GetDivisions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployeeGroups request
	GetEmployeeGroups(ctx context.Context, params *GetEmployeeGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployees request
	GetEmployees(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterEmployee request with any body
	RegisterEmployeeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterEmployee(ctx context.Context, body RegisterEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployee request
	GetEmployee(ctx context.Context, employeeCode EmployeeCode, params *GetEmployeeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEmployee request
	DeleteEmployee(ctx context.Context, employeeKey EmployeeKey, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEmployee request with any body
	UpdateEmployeeWithBody(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEmployee(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, body UpdateEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOvertimes request
	GetOvertimes(ctx context.Context, date string, params *GetOvertimesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedules request
	GetSchedules(ctx context.Context, date string, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SuspendAccessToken request
	SuspendAccessToken(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshAccessToken request
	RefreshAccessToken(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccessTokenAvailability request
	GetAccessTokenAvailability(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkingTypes request
	GetWorkingTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAdministrators(ctx context.Context, params *GetAdministratorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdministratorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompany(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyWorkings(ctx context.Context, params *GetDailyWorkingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyWorkingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyWorkingTimerecords(ctx context.Context, params *GetDailyWorkingTimerecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyWorkingTimerecordsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyWorkingTimerecord(ctx context.Context, date DateRequired, params *GetDailyWorkingTimerecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyWorkingTimerecordRequest(c.Server, date, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterDailyWorkingTimerecordWithBody(ctx context.Context, employeeKey EmployeeKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterDailyWorkingTimerecordRequestWithBody(c.Server, employeeKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterDailyWorkingTimerecord(ctx context.Context, employeeKey EmployeeKey, body RegisterDailyWorkingTimerecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterDailyWorkingTimerecordRequest(c.Server, employeeKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyWorking(ctx context.Context, date DateRequired, params *GetDailyWorkingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyWorkingRequest(c.Server, date, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDivisions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDivisionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployeeGroups(ctx context.Context, params *GetEmployeeGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeeGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployees(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEmployeeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEmployeeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEmployee(ctx context.Context, body RegisterEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEmployeeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployee(ctx context.Context, employeeCode EmployeeCode, params *GetEmployeeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeeRequest(c.Server, employeeCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEmployee(ctx context.Context, employeeKey EmployeeKey, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEmployeeRequest(c.Server, employeeKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEmployeeWithBody(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEmployeeRequestWithBody(c.Server, employeeKey, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEmployee(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, body UpdateEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEmployeeRequest(c.Server, employeeKey, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOvertimes(ctx context.Context, date string, params *GetOvertimesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOvertimesRequest(c.Server, date, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedules(ctx context.Context, date string, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchedulesRequest(c.Server, date, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuspendAccessToken(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuspendAccessTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshAccessToken(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshAccessTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessTokenAvailability(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessTokenAvailabilityRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkingTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkingTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAdministratorsRequest generates requests for GetAdministrators
func NewGetAdministratorsRequest(server string, params *GetAdministratorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/administrators")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyRequest generates requests for GetCompany
func NewGetCompanyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDailyWorkingsRequest generates requests for GetDailyWorkings
func NewGetDailyWorkingsRequest(server string, params *GetDailyWorkingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ondivision != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ondivision", runtime.ParamLocationQuery, *params.Ondivision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDailyWorkingTimerecordsRequest generates requests for GetDailyWorkingTimerecords
func NewGetDailyWorkingTimerecordsRequest(server string, params *GetDailyWorkingTimerecordsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings/timerecord/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EmployeeKeys != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "employeeKeys", runtime.ParamLocationQuery, *params.EmployeeKeys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ondivision != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ondivision", runtime.ParamLocationQuery, *params.Ondivision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDailyWorkingTimerecordRequest generates requests for GetDailyWorkingTimerecord
func NewGetDailyWorkingTimerecordRequest(server string, date DateRequired, params *GetDailyWorkingTimerecordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings/timerecord/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ondivision != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ondivision", runtime.ParamLocationQuery, *params.Ondivision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterDailyWorkingTimerecordRequest calls the generic RegisterDailyWorkingTimerecord builder with application/json body
func NewRegisterDailyWorkingTimerecordRequest(server string, employeeKey EmployeeKey, body RegisterDailyWorkingTimerecordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterDailyWorkingTimerecordRequestWithBody(server, employeeKey, "application/json", bodyReader)
}

// NewRegisterDailyWorkingTimerecordRequestWithBody generates requests for RegisterDailyWorkingTimerecord with any type of body
func NewRegisterDailyWorkingTimerecordRequestWithBody(server string, employeeKey EmployeeKey, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "employeeKey", runtime.ParamLocationPath, employeeKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings/timerecord/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDailyWorkingRequest generates requests for GetDailyWorking
func NewGetDailyWorkingRequest(server string, date DateRequired, params *GetDailyWorkingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily-workings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ondivision != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ondivision", runtime.ParamLocationQuery, *params.Ondivision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDivisionsRequest generates requests for GetDivisions
func NewGetDivisionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/divisions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmployeeGroupsRequest generates requests for GetEmployeeGroups
func NewGetEmployeeGroupsRequest(server string, params *GetEmployeeGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employee-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmployeesRequest generates requests for GetEmployees
func NewGetEmployeesRequest(server string, params *GetEmployeesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Date != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Division != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "division", runtime.ParamLocationQuery, *params.Division); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeResigner != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeResigner", runtime.ParamLocationQuery, *params.IncludeResigner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterEmployeeRequest calls the generic RegisterEmployee builder with application/json body
func NewRegisterEmployeeRequest(server string, body RegisterEmployeeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterEmployeeRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterEmployeeRequestWithBody generates requests for RegisterEmployee with any type of body
func NewRegisterEmployeeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmployeeRequest generates requests for GetEmployee
func NewGetEmployeeRequest(server string, employeeCode EmployeeCode, params *GetEmployeeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "employeeCode", runtime.ParamLocationPath, employeeCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Date != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeResigner != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeResigner", runtime.ParamLocationQuery, *params.IncludeResigner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEmployeeRequest generates requests for DeleteEmployee
func NewDeleteEmployeeRequest(server string, employeeKey EmployeeKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "employeeKey", runtime.ParamLocationPath, employeeKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEmployeeRequest calls the generic UpdateEmployee builder with application/json body
func NewUpdateEmployeeRequest(server string, employeeKey EmployeeKey, params *UpdateEmployeeParams, body UpdateEmployeeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEmployeeRequestWithBody(server, employeeKey, params, "application/json", bodyReader)
}

// NewUpdateEmployeeRequestWithBody generates requests for UpdateEmployee with any type of body
func NewUpdateEmployeeRequestWithBody(server string, employeeKey EmployeeKey, params *UpdateEmployeeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "employeeKey", runtime.ParamLocationPath, employeeKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UpdateDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updateDate", runtime.ParamLocationQuery, *params.UpdateDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOvertimesRequest generates requests for GetOvertimes
func NewGetOvertimesRequest(server string, date string, params *GetOvertimesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requests/overtimes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AdministratorKey != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "administratorKey", runtime.ParamLocationQuery, *params.AdministratorKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchedulesRequest generates requests for GetSchedules
func NewGetSchedulesRequest(server string, date string, params *GetSchedulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/requests/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AdministratorKey != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "administratorKey", runtime.ParamLocationQuery, *params.AdministratorKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSuspendAccessTokenRequest generates requests for SuspendAccessToken
func NewSuspendAccessTokenRequest(server string, token Token) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshAccessTokenRequest generates requests for RefreshAccessToken
func NewRefreshAccessTokenRequest(server string, token Token) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccessTokenAvailabilityRequest generates requests for GetAccessTokenAvailability
func NewGetAccessTokenAvailabilityRequest(server string, token Token) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens/%s/available", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkingTypesRequest generates requests for GetWorkingTypes
func NewGetWorkingTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/working-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdministrators request
	GetAdministratorsWithResponse(ctx context.Context, params *GetAdministratorsParams, reqEditors ...RequestEditorFn) (*GetAdministratorsResponse, error)

	// GetCompany request
	GetCompanyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCompanyResponse, error)

	// GetDailyWorkings request
	GetDailyWorkingsWithResponse(ctx context.Context, params *GetDailyWorkingsParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingsResponse, error)

	// GetDailyWorkingTimerecords request
	GetDailyWorkingTimerecordsWithResponse(ctx context.Context, params *GetDailyWorkingTimerecordsParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingTimerecordsResponse, error)

	// GetDailyWorkingTimerecord request
	GetDailyWorkingTimerecordWithResponse(ctx context.Context, date DateRequired, params *GetDailyWorkingTimerecordParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingTimerecordResponse, error)

	// RegisterDailyWorkingTimerecord request with any body
	RegisterDailyWorkingTimerecordWithBodyWithResponse(ctx context.Context, employeeKey EmployeeKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterDailyWorkingTimerecordResponse, error)

	RegisterDailyWorkingTimerecordWithResponse(ctx context.Context, employeeKey EmployeeKey, body RegisterDailyWorkingTimerecordJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterDailyWorkingTimerecordResponse, error)

	// GetDailyWorking request
	GetDailyWorkingWithResponse(ctx context.Context, date DateRequired, params *GetDailyWorkingParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingResponse, error)

	// GetDivisions request
	GetDivisionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDivisionsResponse, error)

	// GetEmployeeGroups request
	GetEmployeeGroupsWithResponse(ctx context.Context, params *GetEmployeeGroupsParams, reqEditors ...RequestEditorFn) (*GetEmployeeGroupsResponse, error)

	// GetEmployees request
	GetEmployeesWithResponse(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*GetEmployeesResponse, error)

	// RegisterEmployee request with any body
	RegisterEmployeeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterEmployeeResponse, error)

	RegisterEmployeeWithResponse(ctx context.Context, body RegisterEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterEmployeeResponse, error)

	// GetEmployee request
	GetEmployeeWithResponse(ctx context.Context, employeeCode EmployeeCode, params *GetEmployeeParams, reqEditors ...RequestEditorFn) (*GetEmployeeResponse, error)

	// DeleteEmployee request
	DeleteEmployeeWithResponse(ctx context.Context, employeeKey EmployeeKey, reqEditors ...RequestEditorFn) (*DeleteEmployeeResponse, error)

	// UpdateEmployee request with any body
	UpdateEmployeeWithBodyWithResponse(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEmployeeResponse, error)

	UpdateEmployeeWithResponse(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, body UpdateEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEmployeeResponse, error)

	// GetOvertimes request
	GetOvertimesWithResponse(ctx context.Context, date string, params *GetOvertimesParams, reqEditors ...RequestEditorFn) (*GetOvertimesResponse, error)

	// GetSchedules request
	GetSchedulesWithResponse(ctx context.Context, date string, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*GetSchedulesResponse, error)

	// SuspendAccessToken request
	SuspendAccessTokenWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*SuspendAccessTokenResponse, error)

	// RefreshAccessToken request
	RefreshAccessTokenWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*RefreshAccessTokenResponse, error)

	// GetAccessTokenAvailability request
	GetAccessTokenAvailabilityWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*GetAccessTokenAvailabilityResponse, error)

	// GetWorkingTypes request
	GetWorkingTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkingTypesResponse, error)
}

type GetAdministratorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAdministrators
}

// Status returns HTTPResponse.Status
func (r GetAdministratorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdministratorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCompany
}

// Status returns HTTPResponse.Status
func (r GetCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyWorkingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDailyWorkings
}

// Status returns HTTPResponse.Status
func (r GetDailyWorkingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyWorkingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyWorkingTimerecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GetDailyWorkingTimerecords
}

// Status returns HTTPResponse.Status
func (r GetDailyWorkingTimerecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyWorkingTimerecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyWorkingTimerecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DailyWorkings []DailyWorkingTimerecord `json:"dailyWorkings"`
		Date          openapi_types.Date       `json:"date"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDailyWorkingTimerecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyWorkingTimerecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterDailyWorkingTimerecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegisterDailyWorkingTimerecord
}

// Status returns HTTPResponse.Status
func (r RegisterDailyWorkingTimerecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterDailyWorkingTimerecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyWorkingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDailyWorking
}

// Status returns HTTPResponse.Status
func (r GetDailyWorkingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyWorkingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDivisionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDivisions
}

// Status returns HTTPResponse.Status
func (r GetDivisionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDivisionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeeGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEmployeeGroups
}

// Status returns HTTPResponse.Status
func (r GetEmployeeGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeeGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEmployees
}

// Status returns HTTPResponse.Status
func (r GetEmployeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterEmployeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegisterEmployee
}

// Status returns HTTPResponse.Status
func (r RegisterEmployeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterEmployeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEmployee
}

// Status returns HTTPResponse.Status
func (r GetEmployeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEmployeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEmployeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEmployeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEmployeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateEmployee
}

// Status returns HTTPResponse.Status
func (r UpdateEmployeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEmployeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOvertimesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetOvertimes
}

// Status returns HTTPResponse.Status
func (r GetOvertimesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOvertimesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSchedules
}

// Status returns HTTPResponse.Status
func (r GetSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SuspendAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SuspendAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SuspendAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RefreshAccessToken
}

// Status returns HTTPResponse.Status
func (r RefreshAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccessTokenAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccessTokenAvailability
}

// Status returns HTTPResponse.Status
func (r GetAccessTokenAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccessTokenAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkingTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkingTypeResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkingTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkingTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdministratorsWithResponse request returning *GetAdministratorsResponse
func (c *ClientWithResponses) GetAdministratorsWithResponse(ctx context.Context, params *GetAdministratorsParams, reqEditors ...RequestEditorFn) (*GetAdministratorsResponse, error) {
	rsp, err := c.GetAdministrators(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdministratorsResponse(rsp)
}

// GetCompanyWithResponse request returning *GetCompanyResponse
func (c *ClientWithResponses) GetCompanyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCompanyResponse, error) {
	rsp, err := c.GetCompany(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyResponse(rsp)
}

// GetDailyWorkingsWithResponse request returning *GetDailyWorkingsResponse
func (c *ClientWithResponses) GetDailyWorkingsWithResponse(ctx context.Context, params *GetDailyWorkingsParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingsResponse, error) {
	rsp, err := c.GetDailyWorkings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyWorkingsResponse(rsp)
}

// GetDailyWorkingTimerecordsWithResponse request returning *GetDailyWorkingTimerecordsResponse
func (c *ClientWithResponses) GetDailyWorkingTimerecordsWithResponse(ctx context.Context, params *GetDailyWorkingTimerecordsParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingTimerecordsResponse, error) {
	rsp, err := c.GetDailyWorkingTimerecords(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyWorkingTimerecordsResponse(rsp)
}

// GetDailyWorkingTimerecordWithResponse request returning *GetDailyWorkingTimerecordResponse
func (c *ClientWithResponses) GetDailyWorkingTimerecordWithResponse(ctx context.Context, date DateRequired, params *GetDailyWorkingTimerecordParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingTimerecordResponse, error) {
	rsp, err := c.GetDailyWorkingTimerecord(ctx, date, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyWorkingTimerecordResponse(rsp)
}

// RegisterDailyWorkingTimerecordWithBodyWithResponse request with arbitrary body returning *RegisterDailyWorkingTimerecordResponse
func (c *ClientWithResponses) RegisterDailyWorkingTimerecordWithBodyWithResponse(ctx context.Context, employeeKey EmployeeKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterDailyWorkingTimerecordResponse, error) {
	rsp, err := c.RegisterDailyWorkingTimerecordWithBody(ctx, employeeKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterDailyWorkingTimerecordResponse(rsp)
}

func (c *ClientWithResponses) RegisterDailyWorkingTimerecordWithResponse(ctx context.Context, employeeKey EmployeeKey, body RegisterDailyWorkingTimerecordJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterDailyWorkingTimerecordResponse, error) {
	rsp, err := c.RegisterDailyWorkingTimerecord(ctx, employeeKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterDailyWorkingTimerecordResponse(rsp)
}

// GetDailyWorkingWithResponse request returning *GetDailyWorkingResponse
func (c *ClientWithResponses) GetDailyWorkingWithResponse(ctx context.Context, date DateRequired, params *GetDailyWorkingParams, reqEditors ...RequestEditorFn) (*GetDailyWorkingResponse, error) {
	rsp, err := c.GetDailyWorking(ctx, date, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyWorkingResponse(rsp)
}

// GetDivisionsWithResponse request returning *GetDivisionsResponse
func (c *ClientWithResponses) GetDivisionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDivisionsResponse, error) {
	rsp, err := c.GetDivisions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDivisionsResponse(rsp)
}

// GetEmployeeGroupsWithResponse request returning *GetEmployeeGroupsResponse
func (c *ClientWithResponses) GetEmployeeGroupsWithResponse(ctx context.Context, params *GetEmployeeGroupsParams, reqEditors ...RequestEditorFn) (*GetEmployeeGroupsResponse, error) {
	rsp, err := c.GetEmployeeGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeeGroupsResponse(rsp)
}

// GetEmployeesWithResponse request returning *GetEmployeesResponse
func (c *ClientWithResponses) GetEmployeesWithResponse(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*GetEmployeesResponse, error) {
	rsp, err := c.GetEmployees(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeesResponse(rsp)
}

// RegisterEmployeeWithBodyWithResponse request with arbitrary body returning *RegisterEmployeeResponse
func (c *ClientWithResponses) RegisterEmployeeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterEmployeeResponse, error) {
	rsp, err := c.RegisterEmployeeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEmployeeResponse(rsp)
}

func (c *ClientWithResponses) RegisterEmployeeWithResponse(ctx context.Context, body RegisterEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterEmployeeResponse, error) {
	rsp, err := c.RegisterEmployee(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEmployeeResponse(rsp)
}

// GetEmployeeWithResponse request returning *GetEmployeeResponse
func (c *ClientWithResponses) GetEmployeeWithResponse(ctx context.Context, employeeCode EmployeeCode, params *GetEmployeeParams, reqEditors ...RequestEditorFn) (*GetEmployeeResponse, error) {
	rsp, err := c.GetEmployee(ctx, employeeCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeeResponse(rsp)
}

// DeleteEmployeeWithResponse request returning *DeleteEmployeeResponse
func (c *ClientWithResponses) DeleteEmployeeWithResponse(ctx context.Context, employeeKey EmployeeKey, reqEditors ...RequestEditorFn) (*DeleteEmployeeResponse, error) {
	rsp, err := c.DeleteEmployee(ctx, employeeKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEmployeeResponse(rsp)
}

// UpdateEmployeeWithBodyWithResponse request with arbitrary body returning *UpdateEmployeeResponse
func (c *ClientWithResponses) UpdateEmployeeWithBodyWithResponse(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEmployeeResponse, error) {
	rsp, err := c.UpdateEmployeeWithBody(ctx, employeeKey, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEmployeeResponse(rsp)
}

func (c *ClientWithResponses) UpdateEmployeeWithResponse(ctx context.Context, employeeKey EmployeeKey, params *UpdateEmployeeParams, body UpdateEmployeeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEmployeeResponse, error) {
	rsp, err := c.UpdateEmployee(ctx, employeeKey, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEmployeeResponse(rsp)
}

// GetOvertimesWithResponse request returning *GetOvertimesResponse
func (c *ClientWithResponses) GetOvertimesWithResponse(ctx context.Context, date string, params *GetOvertimesParams, reqEditors ...RequestEditorFn) (*GetOvertimesResponse, error) {
	rsp, err := c.GetOvertimes(ctx, date, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOvertimesResponse(rsp)
}

// GetSchedulesWithResponse request returning *GetSchedulesResponse
func (c *ClientWithResponses) GetSchedulesWithResponse(ctx context.Context, date string, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*GetSchedulesResponse, error) {
	rsp, err := c.GetSchedules(ctx, date, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchedulesResponse(rsp)
}

// SuspendAccessTokenWithResponse request returning *SuspendAccessTokenResponse
func (c *ClientWithResponses) SuspendAccessTokenWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*SuspendAccessTokenResponse, error) {
	rsp, err := c.SuspendAccessToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuspendAccessTokenResponse(rsp)
}

// RefreshAccessTokenWithResponse request returning *RefreshAccessTokenResponse
func (c *ClientWithResponses) RefreshAccessTokenWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*RefreshAccessTokenResponse, error) {
	rsp, err := c.RefreshAccessToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshAccessTokenResponse(rsp)
}

// GetAccessTokenAvailabilityWithResponse request returning *GetAccessTokenAvailabilityResponse
func (c *ClientWithResponses) GetAccessTokenAvailabilityWithResponse(ctx context.Context, token Token, reqEditors ...RequestEditorFn) (*GetAccessTokenAvailabilityResponse, error) {
	rsp, err := c.GetAccessTokenAvailability(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessTokenAvailabilityResponse(rsp)
}

// GetWorkingTypesWithResponse request returning *GetWorkingTypesResponse
func (c *ClientWithResponses) GetWorkingTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkingTypesResponse, error) {
	rsp, err := c.GetWorkingTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkingTypesResponse(rsp)
}

// ParseGetAdministratorsResponse parses an HTTP response from a GetAdministratorsWithResponse call
func ParseGetAdministratorsResponse(rsp *http.Response) (*GetAdministratorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdministratorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAdministrators
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyResponse parses an HTTP response from a GetCompanyWithResponse call
func ParseGetCompanyResponse(rsp *http.Response) (*GetCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCompany
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDailyWorkingsResponse parses an HTTP response from a GetDailyWorkingsWithResponse call
func ParseGetDailyWorkingsResponse(rsp *http.Response) (*GetDailyWorkingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyWorkingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDailyWorkings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDailyWorkingTimerecordsResponse parses an HTTP response from a GetDailyWorkingTimerecordsWithResponse call
func ParseGetDailyWorkingTimerecordsResponse(rsp *http.Response) (*GetDailyWorkingTimerecordsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyWorkingTimerecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GetDailyWorkingTimerecords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDailyWorkingTimerecordResponse parses an HTTP response from a GetDailyWorkingTimerecordWithResponse call
func ParseGetDailyWorkingTimerecordResponse(rsp *http.Response) (*GetDailyWorkingTimerecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyWorkingTimerecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DailyWorkings []DailyWorkingTimerecord `json:"dailyWorkings"`
			Date          openapi_types.Date       `json:"date"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterDailyWorkingTimerecordResponse parses an HTTP response from a RegisterDailyWorkingTimerecordWithResponse call
func ParseRegisterDailyWorkingTimerecordResponse(rsp *http.Response) (*RegisterDailyWorkingTimerecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterDailyWorkingTimerecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegisterDailyWorkingTimerecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetDailyWorkingResponse parses an HTTP response from a GetDailyWorkingWithResponse call
func ParseGetDailyWorkingResponse(rsp *http.Response) (*GetDailyWorkingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyWorkingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDailyWorking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDivisionsResponse parses an HTTP response from a GetDivisionsWithResponse call
func ParseGetDivisionsResponse(rsp *http.Response) (*GetDivisionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDivisionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDivisions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmployeeGroupsResponse parses an HTTP response from a GetEmployeeGroupsWithResponse call
func ParseGetEmployeeGroupsResponse(rsp *http.Response) (*GetEmployeeGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeeGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEmployeeGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmployeesResponse parses an HTTP response from a GetEmployeesWithResponse call
func ParseGetEmployeesResponse(rsp *http.Response) (*GetEmployeesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEmployees
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterEmployeeResponse parses an HTTP response from a RegisterEmployeeWithResponse call
func ParseRegisterEmployeeResponse(rsp *http.Response) (*RegisterEmployeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterEmployeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegisterEmployee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetEmployeeResponse parses an HTTP response from a GetEmployeeWithResponse call
func ParseGetEmployeeResponse(rsp *http.Response) (*GetEmployeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEmployee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteEmployeeResponse parses an HTTP response from a DeleteEmployeeWithResponse call
func ParseDeleteEmployeeResponse(rsp *http.Response) (*DeleteEmployeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEmployeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateEmployeeResponse parses an HTTP response from a UpdateEmployeeWithResponse call
func ParseUpdateEmployeeResponse(rsp *http.Response) (*UpdateEmployeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEmployeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateEmployee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOvertimesResponse parses an HTTP response from a GetOvertimesWithResponse call
func ParseGetOvertimesResponse(rsp *http.Response) (*GetOvertimesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOvertimesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetOvertimes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSchedulesResponse parses an HTTP response from a GetSchedulesWithResponse call
func ParseGetSchedulesResponse(rsp *http.Response) (*GetSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSchedules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSuspendAccessTokenResponse parses an HTTP response from a SuspendAccessTokenWithResponse call
func ParseSuspendAccessTokenResponse(rsp *http.Response) (*SuspendAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SuspendAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRefreshAccessTokenResponse parses an HTTP response from a RefreshAccessTokenWithResponse call
func ParseRefreshAccessTokenResponse(rsp *http.Response) (*RefreshAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RefreshAccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAccessTokenAvailabilityResponse parses an HTTP response from a GetAccessTokenAvailabilityWithResponse call
func ParseGetAccessTokenAvailabilityResponse(rsp *http.Response) (*GetAccessTokenAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccessTokenAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccessTokenAvailability
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkingTypesResponse parses an HTTP response from a GetWorkingTypesWithResponse call
func ParseGetWorkingTypesResponse(rsp *http.Response) (*GetWorkingTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkingTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkingTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
