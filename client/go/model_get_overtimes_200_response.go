/*
KING OF TIME WebAPI

KING OF TIME WebAPI specification https://developer.kingtime.jp/

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetOvertimes200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetOvertimes200Response{}

// GetOvertimes200Response struct for GetOvertimes200Response
type GetOvertimes200Response struct {
	Year int32 `json:"year"`
	Month int32 `json:"month"`
	OvertimeRequests []GetOvertimes200ResponseOvertimeRequestsInner `json:"overtimeRequests"`
}

// NewGetOvertimes200Response instantiates a new GetOvertimes200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetOvertimes200Response(year int32, month int32, overtimeRequests []GetOvertimes200ResponseOvertimeRequestsInner) *GetOvertimes200Response {
	this := GetOvertimes200Response{}
	this.Year = year
	this.Month = month
	this.OvertimeRequests = overtimeRequests
	return &this
}

// NewGetOvertimes200ResponseWithDefaults instantiates a new GetOvertimes200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetOvertimes200ResponseWithDefaults() *GetOvertimes200Response {
	this := GetOvertimes200Response{}
	return &this
}

// GetYear returns the Year field value
func (o *GetOvertimes200Response) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *GetOvertimes200Response) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *GetOvertimes200Response) SetYear(v int32) {
	o.Year = v
}

// GetMonth returns the Month field value
func (o *GetOvertimes200Response) GetMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *GetOvertimes200Response) GetMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *GetOvertimes200Response) SetMonth(v int32) {
	o.Month = v
}

// GetOvertimeRequests returns the OvertimeRequests field value
func (o *GetOvertimes200Response) GetOvertimeRequests() []GetOvertimes200ResponseOvertimeRequestsInner {
	if o == nil {
		var ret []GetOvertimes200ResponseOvertimeRequestsInner
		return ret
	}

	return o.OvertimeRequests
}

// GetOvertimeRequestsOk returns a tuple with the OvertimeRequests field value
// and a boolean to check if the value has been set.
func (o *GetOvertimes200Response) GetOvertimeRequestsOk() ([]GetOvertimes200ResponseOvertimeRequestsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.OvertimeRequests, true
}

// SetOvertimeRequests sets field value
func (o *GetOvertimes200Response) SetOvertimeRequests(v []GetOvertimes200ResponseOvertimeRequestsInner) {
	o.OvertimeRequests = v
}

func (o GetOvertimes200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetOvertimes200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["year"] = o.Year
	toSerialize["month"] = o.Month
	toSerialize["overtimeRequests"] = o.OvertimeRequests
	return toSerialize, nil
}

type NullableGetOvertimes200Response struct {
	value *GetOvertimes200Response
	isSet bool
}

func (v NullableGetOvertimes200Response) Get() *GetOvertimes200Response {
	return v.value
}

func (v *NullableGetOvertimes200Response) Set(val *GetOvertimes200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOvertimes200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOvertimes200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOvertimes200Response(val *GetOvertimes200Response) *NullableGetOvertimes200Response {
	return &NullableGetOvertimes200Response{value: val, isSet: true}
}

func (v NullableGetOvertimes200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOvertimes200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


