/*
KING OF TIME WebAPI

KING OF TIME WebAPI specification https://developer.kingtime.jp/

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DivisionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DivisionResponse{}

// DivisionResponse struct for DivisionResponse
type DivisionResponse struct {
	// 所属コード
	Code string `json:"code"`
	// 所属名
	Name string `json:"name"`
	// 所属名
	DayBorderTime string `json:"dayBorderTime"`
}

// NewDivisionResponse instantiates a new DivisionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDivisionResponse(code string, name string, dayBorderTime string) *DivisionResponse {
	this := DivisionResponse{}
	this.Code = code
	this.Name = name
	this.DayBorderTime = dayBorderTime
	return &this
}

// NewDivisionResponseWithDefaults instantiates a new DivisionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDivisionResponseWithDefaults() *DivisionResponse {
	this := DivisionResponse{}
	return &this
}

// GetCode returns the Code field value
func (o *DivisionResponse) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *DivisionResponse) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *DivisionResponse) SetCode(v string) {
	o.Code = v
}

// GetName returns the Name field value
func (o *DivisionResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DivisionResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DivisionResponse) SetName(v string) {
	o.Name = v
}

// GetDayBorderTime returns the DayBorderTime field value
func (o *DivisionResponse) GetDayBorderTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DayBorderTime
}

// GetDayBorderTimeOk returns a tuple with the DayBorderTime field value
// and a boolean to check if the value has been set.
func (o *DivisionResponse) GetDayBorderTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DayBorderTime, true
}

// SetDayBorderTime sets field value
func (o *DivisionResponse) SetDayBorderTime(v string) {
	o.DayBorderTime = v
}

func (o DivisionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DivisionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["name"] = o.Name
	toSerialize["dayBorderTime"] = o.DayBorderTime
	return toSerialize, nil
}

type NullableDivisionResponse struct {
	value *DivisionResponse
	isSet bool
}

func (v NullableDivisionResponse) Get() *DivisionResponse {
	return v.value
}

func (v *NullableDivisionResponse) Set(val *DivisionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDivisionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDivisionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDivisionResponse(val *DivisionResponse) *NullableDivisionResponse {
	return &NullableDivisionResponse{value: val, isSet: true}
}

func (v NullableDivisionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDivisionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


