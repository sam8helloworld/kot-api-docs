/*
KING OF TIME WebAPI

Testing AttendanceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"testing"

	openapiclient "github.com/sam8helloworld/kot-api-docs"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_AttendanceApiService(t *testing.T) {

	configuration := configuration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AttendanceApiService GetDailyWorkings", func(t *testing.T) {
		ctx := contextWithAuthorization()
		resp, httpRes, err := apiClient.AttendanceApi.GetDailyWorkings(ctx).Division("1000").Ondivision(true).Start("2016-05-01").End("2016-05-01").AdditionalFields([]string{"currentDateEmployee"}).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AttendanceApiService GetDailyWorking", func(t *testing.T) {
		date := "2016-05-01"
		ctx := contextWithAuthorization()
		resp, httpRes, err := apiClient.AttendanceApi.GetDailyWorking(ctx, date).Division("1000").Ondivision(true).AdditionalFields([]string{"currentDateEmployee"}).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AttendanceApiService RegisterDailyWorkingTimerecord", func(t *testing.T) {
		employeeKey := "8b6ee646a9620b286499c3df6918c4888a97dd7bbc6a26a18743f4697a1de4b3"
		ctx := contextWithAuthorization()
		resp, httpRes, err := apiClient.AttendanceApi.RegisterDailyWorkingTimerecord(ctx, employeeKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 201, httpRes.StatusCode)
	})

	t.Run("Test AttendanceApiService GetDailyWorkingTimerecords", func(t *testing.T) {
		ctx := contextWithAuthorization()
		resp, httpRes, err := apiClient.AttendanceApi.GetDailyWorkingTimerecords(ctx).
			EmployeeKeys([]string{"8b6ee646a9620b286499c3df6918c4888a97dd7bbc6a26a18743f4697a1de4b3"}).
			Division("1000").Ondivision(true).Start("2016-05-01").End("2016-05-01").
			AdditionalFields([]string{"currentDateEmployee"}).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AttendanceApiService GetDailyWorkingTimerecord", func(t *testing.T) {
		ctx := contextWithAuthorization()
		resp, httpRes, err := apiClient.AttendanceApi.GetDailyWorkingTimerecord(ctx).Date("2016-05-01").
			Division("1000").Ondivision(true).AdditionalFields([]string{"currentDateEmployee"}).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
