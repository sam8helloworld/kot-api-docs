/*
KING OF TIME WebAPI

Testing TokenApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"testing"

	openapiclient "github.com/sam8helloworld/kot-api-docs"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_TokenApiService(t *testing.T) {
	configuration := configuration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TokenApiService GetAccessTokenAvailability", func(t *testing.T) {
		token := "8j9f7v4893y58rvt7nyfq2893n75tr78937n83"
		ctx := contextWithAuthorization()
		resp, httpRes, err := apiClient.TokenApi.GetAccessTokenAvailability(ctx, token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test TokenApiService RefreshAccessToken", func(t *testing.T) {
		token := "8j9f7v4893y58rvt7nyfq2893n75tr78937n83"
		ctx := contextWithAuthorization()
		resp, httpRes, err := apiClient.TokenApi.RefreshAccessToken(ctx, token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 201, httpRes.StatusCode)
	})

	t.Run("Test TokenApiService SuspendAccessToken", func(t *testing.T) {
		token := "8j9f7v4893y58rvt7nyfq2893n75tr78937n83"
		ctx := contextWithAuthorization()
		httpRes, err := apiClient.TokenApi.SuspendAccessToken(ctx, token).Execute()

		require.Nil(t, err)
		assert.Equal(t, 204, httpRes.StatusCode)
	})

}
